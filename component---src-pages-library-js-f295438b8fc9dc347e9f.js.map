{"version":3,"file":"component---src-pages-library-js-f295438b8fc9dc347e9f.js","mappings":"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","sources":["webpack://phase-03/./src/components/Comment.js","webpack://phase-03/./src/components/WordsIndex.js","webpack://phase-03/./src/components/Accordion.js","webpack://phase-03/./src/utils/mix.js","webpack://phase-03/./src/components/maskometerGrid.js","webpack://phase-03/./src/components/Comments.js","webpack://phase-03/./src/pages/library.js","webpack://phase-03/./src/utils/sentences.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport classNames from \"classnames\";\nimport {sentenceHasWord} from \"../utils/sentences\";\n\nexport function HighlightedWord({children, className, isActive, promask, nomask, secondary}) {\n    return <span\n        className={classNames(\n            'highlighted-word',\n            !promask && !nomask && 'before:bg-light',\n            secondary ?\n                [\n                    isActive && 'before:bg-light'\n                ] :\n                [\n                    promask && 'before:bg-promask',\n                    nomask && 'before:bg-nomask',\n                    isActive && (nomask || promask) && 'text-white',\n\n                ],\n            !isActive && 'before:scale-x-0',\n            className\n        )}\n    >\n        {children}\n    </span>\n}\n\nexport default function Comment({\n                                    id,\n                                    className,\n                                    children,\n                                    origin,\n                                    sentences,\n                                    user,\n                                    createdAt,\n                                    dateText,\n                                    word,\n                                    secondWord,\n                                    petition,\n                                    splitted,\n                                    petitionTitle,\n                                    highlightWords,\n                                    large\n                                }) {\n    let lastWasSkipped = false\n\n    const [showAll, setShowAll] = useState()\n\n    return <div\n        id={id}\n        className={classNames(\n            className,\n            \"comment grid grid-cols-8 gap-4 w-full bg-white text-black boreder-2 normal-case\",\n            large ? 'p-8 rounded-xl' : 'p-4 rounded-xl text-base ',\n            origin === 'promask' && 'border-promask',\n            origin === 'nomask' && 'border-nomask'\n        )}>\n        <div className=\" \">\n            <div className={\"rounded-full bg-\" + origin} style={{aspectRatio: '1'}}/>\n        </div>\n        <div className={\"col-span-7\"}>\n            <div className={\"text-gray select-none \" + (large ? 'text-xl' : 'text-sm')}>\n                <span>User{user}</span>\n                {' • '}\n                <span>{dateText || createdAt}</span>\n            </div>\n            <p className={'comment-text ' + (large ? 'text-4xl leading-snug py-4' : 'py-1 text-base')}>\n                {typeof sentences !== 'undefined' ? sentences.map((sentence, i) => {\n\n\n                    if (sentenceHasWord(sentence, word) || sentenceHasWord(sentence, secondWord)) {\n                        lastWasSkipped = false\n                        return <React.Fragment key={i}>{\n                            sentence.map((part, i) => {\n                                const isPrimaryWord = part.toLowerCase() === word\n                                const isSecondaryWord = part.toLowerCase() === secondWord\n\n                                if (isPrimaryWord || isSecondaryWord) return <React.Fragment\n                                    key={i}>{\" \"}\n                                    <HighlightedWord\n                                        isActive={highlightWords} promask={origin === 'promask'}\n                                        nomask={origin === 'nomask'} secondary={!isSecondaryWord}>\n                                        {part}\n                                    </HighlightedWord>\n                                </React.Fragment>\n\n                                if (part === secondWord) return <span key={i} className={\n                                    'border-light border-2'\n                                }>{part}</span>\n\n                                return part\n                            })\n                        }{\" \"}\n                        </React.Fragment>\n                    }\n\n                    if (!lastWasSkipped) {\n                        lastWasSkipped = true\n                        return \"[...] \"\n                    }\n\n\n                }) : children}\n            </p>\n            <a href={\"https://www.change.org/p/\" + petition.slug} title={petition.title}\n               className={classNames(\"text-gray truncate underline hover:text-light-darker block \", large ? 'text-xl' : 'text-sm')}\n               target={'_blank'}>\n                {petition.title || \"Petition title\"}\n            </a>\n        </div>\n\n    </div>\n\n}\n\n\nComment.defaultProps = {\n    highlightWords: true\n}","import classNames from \"classnames\";\nimport React from \"react\";\n\nexport default function Index({words, chosen, setChosen}) {\n\n    return <div className={classNames(\n        \"transition-all duration-1000 overflow-y-scroll\",\n        chosen.current ? \"w-2/12 border-r-2 border-r-current\" : \"w-full \"\n    )}>\n        <div\n            className={\"sticky top-0 text-light px-8 pt-4 pb-4 border-white border-b-2 transition-[width] duration-1000 bg-black select-none  whitespace-nowrap \" + (!chosen.current && 'w-screen cursor-pointer')}\n            onClick={() => setChosen({})}\n        >\n            <h2\n                className={\n                    classNames(\"inline-block text-3xl uppercase \")\n                }\n            >\n                Words\n            </h2>\n            <span\n                className={classNames(\"ml-2 text-light text-2xl\", chosen.current ? \"hidden\" : \"\")}>/ 20 most used in promask and nomask comments</span>\n\n        </div>\n\n        <ul className=\"\">\n            {words\n                .map(({name, finding}) => <li\n                    key={name}\n                    onMouseEnter={() => setChosen(\n                        c => ({current: c.current, next: name})\n                    )}\n                    onMouseLeave={() => setChosen(c => ({...c, next: undefined}))}\n                    onClick={() => chosen.current !== name ? setChosen({current: name}) : setChosen({})}\n                    className={classNames(\n                        \"border-y-[1px] border-b-current cursor-pointer hover:border-t-light\",\n                        \"px-8 pt-4 pb-4\",\n\n                        chosen.current === name ? \"bg-light text-black border-t-light\" : \"hover:text-light border-t-black\",\n                    )}\n                >\n                    <h2 className={classNames(\n                        \"text-lg uppercase\",\n                    )}>\n                        {name}\n                    </h2>\n                    {(chosen.current === name && finding) && <p className={\"pt-1 text-base\"}>\n                        {finding}\n                    </p>}\n                </li>)}\n        </ul>\n    </div>\n\n}","import React from \"react\";\nimport classNames from \"classnames\";\n\nexport default function Accordion({onClick, isOpen, children, title, subtitle}) {\n\n\n    return <div className={\"flex-grow flex flex-col last:border-t-white last:border-t-2 \" + (isOpen ? \"h-full\": '')}>\n        <div\n            className={\"pt-4 pb-4 px-8 border-y-white box-border flex justify-between group select-none cursor-pointer text-light \" }\n            onClick={onClick}\n        >\n            <div className={\"whitespace-nowrap \"}>\n                <h2\n                    className={\"text-2xl uppercase inline-block\"}\n                >\n                    {title}\n                </h2>\n                <span\n                    className={classNames(\"ml-2 leading-none text-xl transition-[opacity] normal-case\", isOpen ? \"\" : \"hidden group-hover:inline-block group-hover:opacity-50 group-active:opacity-100\")}>\n                    / {subtitle}\n                </span>\n\n            </div>\n\n            <div>\n                <svg width=\"25\" height=\"25\" viewBox=\"0 0 25 25\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                     <path d=\"M0 12.5L25 12.5\" stroke=\"currentColor\" strokeWidth=\"2\"/>\n                    {!isOpen && <path d=\"M12.5 25L12.5 -1.04308e-06\" stroke=\"currentColor\" strokeWidth=\"2\"/>}\n                </svg>\n            </div>\n\n        </div>\n\n        <div className={classNames(\n            \"overflow-hidden\",\n            \"\",\n            isOpen ? \"h-full\" : 'h-0'\n        )}>\n            {children}\n\n        </div>\n    </div>\n}\n\n\nAccordion.defaultProps = {\n    onToggle: () => {\n    }\n}","function d2h(d) {\n    return d.toString(16);\n}  // convert a decimal value to hex\nfunction h2d(h) {\n    return parseInt(h, 16);\n} // convert a hex value to decimal\n\n\nexport function mix(color_1, color_2, weight) {\n    weight = (typeof (weight) !== 'undefined') ? weight : 50; // set the weight to 50%, if that argument is omitted\n\n    let color = \"#\";\n\n    for (let i = 0; i <= 5; i += 2) { // loop through each of the 3 hex pairs—red, green, and blue\n        let v1 = h2d(color_1.substr(i, 2)), // extract the current pairs\n            v2 = h2d(color_2.substr(i, 2)),\n\n            // combine the current pairs from each source color, according to the specified weight\n            val = d2h(Math.floor(v2 + (v1 - v2) * (weight / 100.0)));\n\n        while (val.length < 2) {\n            val = '0' + val;\n        } // prepend a '0' if val results in a single digit\n\n        color += val; // concatenate val to our new color string\n    }\n\n    return color; // PROFIT!\n}","import React, {useState} from \"react\";\nimport classNames from \"classnames\";\nimport {ArchiveButton} from \"./Button\";\nimport {mix} from \"../utils/mix\";\n\n\nexport function MaskometerGrid({chosen, words, distribution, onClickSecondWord}) {\n\n\n    return <div className=\"h-full flex flex-col justify-between relative gap-4  \">\n        <p className={\"mx-8 mb-4 text-lg\"}>\n            Horizontal position corresponds to usage by the two groups in the selcted corpus of reasons to sign\n        </p>\n        <div className=\"flex-1 \">\n            <div\n                className={classNames(\" h-full px-8 py-4 flex flex-col justify-between relative\", 'overflow-hidden')}>\n                <div className={\"z-1 uppercase\"}>\n\n                    <p className=\"bg-promask text-white text-lg text-center h-full absolute top-0 bottom-0 left-0 rotate-180 p-1 z-10\"\n                       style={{writingMode: 'vertical-lr'}}>\n                        Promask\n                    </p>\n\n                    <p className=\"bg-nomask text-white text-xl text-center h-full absolute top-0 bottom-0 right-0 p-1 z-10\"\n                       style={{writingMode: 'vertical-rl'}}>\n                        Nomask\n                    </p>\n\n                    <div\n                        className=\"absolute top-0 bottom-0 right-1/2 translate-x-1/2 border-r-[1px] boreder-r-white border-dashed opacity-50\"/>\n\n                    <p className=\"text-lg text-sm 2xl:text-base text-center text-gray select-none absolute top-0 left-0 right-0 w-full normal-case bg-black pb-2\"\n                    >\n                        equally used\n                    </p>\n\n                </div>\n\n                {(typeof chosen !== 'undefined' && chosen.current) ?\n                    words.nodes.map(({name}) => {\n\n                        let isCurrent = chosen.next ? chosen.next === name : chosen.current === name\n\n\n                        let delta = distribution\n                            .find(({\n                                       word,\n                                       secondWord\n                                   }) => {\n\n                                if (chosen.next) {\n                                    return chosen.next === word && secondWord === name\n                                }\n                                return (chosen.current && word === chosen.current) && secondWord === name\n                            })['nomaskDelta']\n\n                        delta = Math.round(delta * 100)\n\n                        return <div key={name}\n                                    className={\n                                        classNames(\n                                            \"w-full flex items-center relative\",\n                                            \"before:absolute before:left-0 before:right-0 \",\n                                            \"before:border-b-[1px] before:block before:top-1/2 before:transition-all\",\n                                            \"before:w-full transition-[margin,background-color] duration-500\",\n                                            isCurrent ? 'before:border-b-gray  opacity-30' : 'before:border-b-current  before:opacity-20'\n                                        )\n                                    }>\n                            <ArchiveButton\n                                isCurrent={isCurrent}\n                                style={{\n                                    marginLeft: delta + \"%\",\n                                    '--gradient-mix': isCurrent ? undefined : mix('EA3C9A', '3514FF', delta)\n                                }}\n                                className={\"transition-[margin] duration-1000 rounded-[0px] -translate-x-1/2 absolute z-20\"}\n                                onClick={() => onClickSecondWord(name)}\n                            >\n                                {name}\n                            </ArchiveButton>\n                        </div>\n                    }) : <div className=\"p-20 text-7xl w-3/4 opacity-50 upppercase\">\n                        click on one of the most used words to see how the related words are used by the two groups\n                        in the comments\n                    </div>\n                }\n            </div>\n\n        </div>\n    </div>\n}","import React, {useMemo} from \"react\";\nimport classNames from \"classnames\";\nimport Comment from \"./Comment\";\nimport {ArchiveButton} from \"./Button\";\nimport {mix} from \"../utils/mix\";\nimport {sentencesHaveWord} from \"../utils/sentences\";\n\n\nfunction GroupCommentList({comments, chosen, secondWord, origin}) {\n\n\n    const {filteredComments, totalComments} = useMemo(() => {\n        let thisOriginComments = comments\n            .filter(({origin: o}) => origin === o)\n\n\n        return {\n            totalComments: thisOriginComments.length,\n            filteredComments: thisOriginComments\n                .filter(({sentences}) => {\n                    return !secondWord || sentencesHaveWord(sentences, secondWord)\n                })\n        }\n    }, [secondWord, origin, chosen])\n\n\n    return <div>\n        <p className=\"sticky top-0 bg-black z-30 text-center text-lg pt-3 pb-4\">\n            {filteredComments.length}{secondWord && \" of \" + totalComments + ` (${(filteredComments.length/totalComments).toFixed(2)*100}%)`} {origin} opinions\n        </p>\n\n        <div key={origin} className={\"flex flex-col gap-4 pb-64 \"}> {filteredComments\n            .map(\n                (c) => <Comment key={c.id}\n                                highlightWords={true}\n                                word={chosen}\n                                secondWord={secondWord} {...c} />\n            )}\n\n        </div>\n    </div>\n}\n\nexport default function Comments({comments, chosen, secondWord, onChangeSecondWord, distribution}) {\n    return <div className={\"flex h-full px-8 flex-wrap \"}>\n        <p className=\"mb-4 w-full text-lg\">Here you can read the reasons to sign the 100 most popular promask and nomask\n            petition</p>\n        <div className={\"w-full sticky top-0\"}>\n            <h2 className={\"text-lg text-light my-4\"}>Filter opinions by:</h2>\n            <div className=\"flex flex-wrap gap-x-2\">\n                {distribution.map(({secondWord: word, nomaskDelta}) => {\n                    const isSelected = secondWord === word\n                    const isCurrent = chosen === word\n\n\n                    return <ArchiveButton\n                        key={word}\n                        checkbox\n                        isCurrent={isCurrent}\n                        className={\"mb-2\"}\n                        isSelected={isSelected}\n                        onClick={() => onChangeSecondWord(isSelected ? undefined : word)}\n                        style={{\n                            '--gradient-mix': mix('EA3C9A', '3514FF', nomaskDelta * 100)\n                        }}\n                    >\n                        {word}\n                    </ArchiveButton>\n                })}\n            </div>\n        </div>\n        <div className=\"flex h-full w-full overflow-y-scroll\">\n\n            <div\n                className={classNames(\"transition-transform w-10/12 mx-auto\")}\n                id={\"comments-container\"}>\n                <div className=\"grid grid-cols-2 gap-16 justify-around \">\n                    {['promask', 'nomask'].map(origin => <GroupCommentList key={origin} origin={origin}\n                                                                           comments={comments}\n                                                                           chosen={chosen} secondWord={secondWord}/>)}\n                </div>\n            </div>\n        </div>\n    </div>\n}","import React, {useEffect, useMemo, useState} from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/Layout\";\nimport classNames from \"classnames\";\nimport WordsIndex from \"../components/WordsIndex\";\nimport Accordion from \"../components/Accordion\";\nimport {MaskometerGrid} from \"../components/maskometerGrid\";\nimport Comments from \"../components/Comments\";\nimport {sentencesHaveWord} from \"../utils/sentences\";\n\nexport default function Library({data: {words, allComments, ...data}}) {\n    const [chosen, setChosen] = useState({})\n    const [secondWord, setSecondWord] = useState()\n    const [showComments, setShowComments] = useState(false)\n\n    const filteredComments = useMemo(() => allComments\n            .nodes\n            .filter(({sentences}) => {\n                return sentencesHaveWord(sentences, chosen.current)\n            }),\n        [chosen.current])\n\n    useEffect(() => {\n        !showComments && secondWord && setShowComments(true)\n    }, [secondWord])\n\n    useEffect(() => {\n        !chosen.next && setSecondWord()\n    }, [chosen])\n\n    const listOfChosenWords = words.nodes.map(x => x.name)\n\n    const distribution = data\n        .distribution\n        .nodes\n        .filter(i => {\n            return listOfChosenWords.findIndex(x => x === i.secondWord) !== -1\n        })\n\n\n    return <Layout wrapperClassName={\"max-h-screen h-screen flex flex-col lg:pb-8 2xl:pb-8 3xl:pb-16\"}\n                   className={\"flex-1 min-h-0 \"}>\n        <div className=\"w-full h-full overflow-hidden flex flex-nowrap  border-y-white border-y-2 \">\n            <WordsIndex words={words.nodes} chosen={chosen} setChosen={setChosen}/>\n            <div className={classNames(\n                'transition-[width] duration-1000 overflow-hidden flex flex-col',\n                chosen.current ? 'w-10/12' : 'w-0'\n            )}>\n                <Accordion title={\"Related words\"} subtitle={<>usage of words when occurring with <span\n                    className=\"uppercase\">{chosen.current}</span></>}\n                           isOpen={!showComments} onClick={() => setShowComments(!showComments)}>\n                    <MaskometerGrid chosen={chosen} words={words} distribution={distribution}\n                                    onClickSecondWord={setSecondWord}/>\n                </Accordion>\n                <Accordion title={\"Opinions\"}\n                           subtitle={<>containing <span\n                               className=\"uppercase\">{chosen.current}</span> {secondWord && <>and <span\n                               className=\"uppercase\">{secondWord}</span></>}  </>}\n                           isOpen={showComments} onClick={() => setShowComments(!showComments)}>\n                    <Comments\n                        comments={filteredComments}\n                        distribution={distribution.filter(({word}) => word === chosen.current)}\n                        chosen={chosen.current}\n                        secondWord={secondWord}\n                        onChangeSecondWord={setSecondWord}\n                    />\n                </Accordion>\n            </div>\n        </div>\n    </Layout>\n}\n\nexport const query = graphql`query Glossary {\n    words: allSheetsScatter(filter: {scelta: {eq: \"X\"}}, sort: {order: ASC, fields: [name]}){\n        nodes{\n            name\n            deltaPromask\n            finding\n        }\n    }\n    distribution: allSheetsDistribuzioneV2(sort: {order: ASC, fields: [secondWord]}) {\n        nodes {\n            word\n            secondWord\n            nomaskDelta\n            promaskDelta\n        }\n    }\n    allComments: allCommentsJson {\n        nodes {\n            ...CommentJsonFragment\n        }\n    }\n}`\n","export function sentenceHasWord(sentence, word) {\n    return sentence.findIndex(p => p.toLowerCase() === word) !== -1\n}\n\nexport function sentencesHaveWord(sentences, word) {\n    for (const sentence of sentences) {\n        if (sentenceHasWord(sentence, word)) {\n            return true\n        }\n    }\n\n    return false\n}\n\n"],"names":["HighlightedWord","children","className","isActive","promask","nomask","secondary","classNames","Comment","id","origin","sentences","user","createdAt","dateText","word","secondWord","petition","highlightWords","splitted","petitionTitle","large","lastWasSkipped","useState","style","aspectRatio","map","sentence","i","sentenceHasWord","key","part","isPrimaryWord","toLowerCase","isSecondaryWord","href","slug","title","target","defaultProps","Index","words","chosen","setChosen","current","onClick","name","finding","onMouseEnter","c","next","onMouseLeave","undefined","Accordion","isOpen","subtitle","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","onToggle","h2d","h","parseInt","mix","color_1","color_2","weight","color","v1","substr","v2","val","Math","floor","toString","length","MaskometerGrid","distribution","onClickSecondWord","writingMode","nodes","isCurrent","delta","find","round","marginLeft","GroupCommentList","comments","useMemo","thisOriginComments","filter","o","totalComments","filteredComments","sentencesHaveWord","toFixed","Comments","onChangeSecondWord","nomaskDelta","isSelected","checkbox","Library","data","allComments","setSecondWord","showComments","setShowComments","useEffect","listOfChosenWords","x","findIndex","Layout","wrapperClassName","p"],"sourceRoot":""}