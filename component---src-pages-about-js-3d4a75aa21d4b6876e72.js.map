{"version":3,"file":"component---src-pages-about-js-3d4a75aa21d4b6876e72.js","mappings":"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","sources":["webpack://phase-03/./src/pages/about.js"],"sourcesContent":["import * as React from \"react\"\nimport Layout from \"../components/Layout\";\nimport Button from \"../components/Button\";\nimport {graphql} from \"gatsby\";\nimport Image from \"../components/Image\";\nimport petitionJson from '../data/petition.json'\nimport commentJson from '../data/sample-comments.json'\nimport {useEffect, useRef, useState} from \"react\";\n\nimport gsap from 'gsap'\nimport {ScrollTrigger} from \"gsap/ScrollTrigger\";\n\ngsap.registerPlugin(ScrollTrigger)\n\nfunction HoverImage({children, component: Component, image, imageUrl, ...props}) {\n\n    let imgClassName = \"  absolute top-2 right-6 translate-x-full z-[-1] opacity-0 group-hover:opacity-50 transition-all\"\n\n\n    return <span className=\"relative group\">\n        <span className={\"underline\"} {...props}>\n            {children}\n        </span>\n        {image && <Image image={image} className={imgClassName} style={{minWidth: '20vw'}}/>}\n        {imageUrl && <img src={imageUrl} className={imgClassName} style={{minWidth: '20vw'}}/>}\n\n    </span>\n}\n\nHoverImage.defaultProps = {\n    components: 'span'\n}\n\nexport default function About({data: {images: {nodes: images}, meme, team: {nodes: team}}}) {\n    const nav = useRef()\n\n    const [active, setActive] = useState()\n\n    useEffect(() => {\n        ScrollTrigger.create({\n            trigger: nav.current,\n            start: 'top 10%',\n            end: 'max',\n            pin: true\n        })\n\n        const headings = gsap.utils.toArray('h2')\n\n        headings.forEach(t => {\n            ScrollTrigger.create({\n                trigger: t,\n                start: 'top 30%',\n                onEnter: () => {\n                    console.log(\"Entered\", t)\n                    setActive(t.id)\n                },\n                onLeaveBack: () => setActive(t.id)\n            })\n        })\n    }, [])\n\n\n    return <Layout wrapperClassName={\"bg-white text-black about-page scroll-p-32\"} container footer light>\n        <h2 className={\"text-[4.34vw] leading-[1.15] uppercase\"}>\n            Opinion library is a website built to explore the language and arguments used in comments to petitions\n            regarding the mask mandate in the United States.\n        </h2>\n\n        <div className=\"mt-32 grid grid-cols-3 gap-x-8\">\n\n            <article className={\"col-span-2 relative z-10\"}>\n                <p>\n                    The research presented in this website was carried out during the Final Synthesis Studio of the\n                    Master Degree in Communication Design offered by Politecnico di Milano.\n                </p>\n                <p>\n                    The research examined petitions published on change.org during the pandemic. Starting from an\n                    analysis of the main petition themes across different countries, the focus of the research narrowed\n                    down to the images and language used on the platform.\n                </p>\n                <p>\n                    The aim of this website is to make the dataset used in this research available to researchers and\n                    potential activists interested in the subject. To do this, we set ourselves the objective of\n                    realising a tool to explore the language and arguments used in comments to petitions regarding the\n                    mask mandate in the <HoverImage\n                    imageUrl={\"https://media4.giphy.com/media/UPm8BqL6igDUPZ29ik/200.gif\"}>United States</HoverImage>.\n                </p>\n\n                <h2 id={\"data\"}>Data</h2>\n                <p>\n                    Comments on change.org differ slightly from comments on other platforms. Only those who signed a\n                    petition can leave a comment on it, as the platform intends comments as \"reasons to sign\" and\n                    prompts users to explain why they signed right after they do so. This means there are no comments\n                    against a petition but only comments supporting it.\n                </p>\n                <p>\n                    When publishing a petition on change.org, users must add at least one tag to indicate its general\n                    subject. Tags differ from country to country, and the <HoverImage\n                    imageUrl=\"https://c.tenor.com/HbNBhv5Qt3cAAAAC/reaction-trump.gif\">United States is the only\n                    country</HoverImage> with tags\n                    both in favour and against the same issue: mask mandates.\n                    Finding this interesting, we decided to collect all the petitions that used these tags.\n                </p>\n                <p>\n\n                    The first step was compiling a list of all the tags related to mask mandates and group them\n                    according to\n                    their position: in favour\n                    or against.\n                </p>\n                <div>\n                    <Image image={images.find(i => i.relativePath === 'about/tags.png')} className={\"mx-auto w-7/12\"}/>\n                </div>\n                <p>We then made a list of all the petitions presenting at least one of the tags above. Since there was\n                    no easy way to do this from the website, we wrote a script in python to do this for us.\n                    The script sends requests to change.org's server-side API, asking for all the petitions tagged with\n                    a specific tag. The server then answers back with a <HoverImage\n                        imageUrl=\"https://media.giphy.com/media/xT3i16tDII3UHUpjVe/giphy.gif\">*.json</HoverImage> file\n                    containing all the petitions we\n                    asked for â€” this includes the title, body, image, signature count, etc.\n                </p>\n                <div\n                    className=\"text-base w-full overflow-hidden no-scrollbar border-2 border-black rounded-3xl w-7/12 mx-auto\">\n                    <h3 className=\"bg-black text-white px-8 py-4 sticky top-0 left-0 select-none\">\n                        <code>petition.json</code>\n                    </h3>\n                    <pre className={\"px-8 py-4 h-96 bg-white overflow-scroll\"}>\n                            {JSON.stringify(petitionJson.items[0].petition, null, 2)}\n                        </pre>\n                </div>\n                <p>\n                    We filtered the petitions, selecting only the 100 most signed in both groups. Once we had the\n                    petitions, we could use their ID to ask the API for their comments. Once again, the server answered\n                    back with a *.json file containing all the comments for each petition.\n                </p>\n                <div\n                    className=\"text-base w-full overflow-hidden no-scrollbar border-2 border-black rounded-3xl w-7/12 mx-auto\">\n                    <h3 className=\"bg-black text-white px-8 py-4 sticky top-0 left-0 select-none\">\n                        <code>comments.json</code>\n                    </h3>\n                    <pre className={\"px-8 py-4 h-96 bg-white overflow-scroll\"}>\n                            {JSON.stringify(commentJson.items, null, 2)}\n                        </pre>\n                </div>\n                <p>\n                    Once all the comments were gathered, we used Google Natural Language API to extract entities from\n                    the dataset â€” these are words and n-grams. This was a quick and easy way to get rid of punctuation,\n                    articles, conjunctions and verbs.\n                </p>\n\n                <div>\n                    <Image image={images.find(i => i.relativePath === 'about/google-nl.png')}\n                           className={\"mx-auto w-7/12\"}/>\n                </div>\n\n                <p>\n                    At this point, we counted how many times each word appeared and converted the absolute number to\n                    percentage values for both groups.\n                </p>\n                <div>\n                    <Image image={images.find(i => i.relativePath === 'about/sheets.png')}\n                           onClick={() => window.open('https://docs.google.com/spreadsheets/d/1XJLmkWSeTswgk32Ap1tPVyqcX_qy__h7pV7zGfd067Y/edit?usp=sharing', '_blank')}\n                           className={\"mx-auto w-7/12\"}/>\n                </div>\n\n                <p>\n                    We then used these percentages to determine whether the word was used with the same frequency by\n                    both groups or if one used it more than the other. We used the following proportion to transform the\n                    two percentages into a single, more readable metric.\n                </p>\n\n                <h2 id={\"interactions\"}>Interactions</h2>\n                <p>\n                    The archive presents two kinds of information: how often a word is used by a certain group and which\n                    are the comments mentioning that word. Presenting both information to the same panel would result in\n                    an overcrowded interface, <HoverImage\n                    imageUrl=\"https://i.pinimg.com/originals/93/a6/42/93a642306c8514a49749bdd557c4b46a.gif\">confusing\n                    the user</HoverImage>.\n                </p>\n                <p>\n                    For this reason we decided to present the information in two different screens: related words and\n                    opinions. Such a division also allowed us to give sequentiality to the navigation, forcing the user\n                    to see how a word is used before reading the comments.\n                    This offers preliminary information to the user while theyâ€™re deciding which comments to read while\n                    also allowing them to understand the context of the comments theyâ€™re reading of one and\n                    the <HoverImage\n                    imageUrl={\"https://www.google.com/url?sa=i&url=https%3A%2F%2Faptly.de%2Fblog%2Fthe-15-best-gif-reactions%2F&psig=AOvVaw0ZXHX-M2RMs-uLH_bMrbg9&ust=1639756440706000&source=images&cd=vfe&ved=0CAsQjRxqEAoMCA8VAAAAAB0AAAAAEA8\"}>other\n                    side</HoverImage>.\n\n                </p>\n                <h2 id={\"team\"}>The team</h2>\n                <p>This project was created by:</p>\n\n                <div className=\"grid grid-cols-4 gap-4\">\n                    {team.map((t, i) => <div className=\"relative group\" key={t.publicURL}>\n                        <Image image={meme.nodes[i]}\n                               className={\"absolute opacity-0  group-hover:opacity-100 z-[-1] group-hover:z-20 right-1/2 top-1/2 -translate-y-1/2 translate-x-2LI/3\"}\n                               style={{minWidth: '15vw'}}/>\n\n                        <Image image={t}/>\n                    </div>)}\n                </div>\n\n            </article>\n\n            <nav className={\"relative uppercase\"} id={'about-nav'}>\n                <ul className={\"flex flex-col gap-y-2 z-10\"} ref={nav}>\n                    <li>\n                        <Button as={'a'} href={\"#data\"} light\n                                className={active === 'data' && '!bg-light-darker !text-black'}>\n                            Data\n                        </Button>\n                    </li>\n                    <li>\n                        <Button as={'a'} href={\"#interactions\"} light\n                                className={active === 'interactions' && '!bg-light-darker !text-black'}>\n                            Interactions\n                        </Button>\n                    </li>\n                    <li>\n                        <Button as={'a'} href={\"#team\"} light\n                                className={active === 'team' && '!bg-light-darker !text-black'}>\n                            The team\n                        </Button>\n                    </li>\n                </ul>\n            </nav>\n        </div>\n    </Layout>\n}\n\nexport const query = graphql`{\n    images : allFile(filter: {relativeDirectory: {eq: \"about\"}}) {\n        nodes {\n            childImageSharp {\n                gatsbyImageData\n            }\n            id\n            relativePath\n            publicURL\n        }\n    }\n    team : allFile(filter: {relativeDirectory: {eq: \"team\"}}, sort: {fields: [name], order: ASC}) {\n        nodes {\n            childImageSharp {\n                gatsbyImageData\n            }\n            id\n            relativePath\n            publicURL\n        }\n    }\n    meme : allFile(filter: {relativeDirectory: {eq: \"meme\"}}, sort: {fields: [name], order: ASC}) {\n        nodes {\n            childImageSharp {\n                gatsbyImageData\n            }\n            id\n            relativePath\n            publicURL\n        }\n    }\n}`"],"names":["HoverImage","children","image","component","imageUrl","props","imgClassName","className","Image","style","minWidth","src","About","data","images","nodes","meme","team","nav","useRef","useState","active","setActive","useEffect","ScrollTrigger","trigger","current","start","end","pin","gsap","forEach","t","onEnter","console","log","id","onLeaveBack","Layout","wrapperClassName","container","footer","light","find","i","relativePath","JSON","stringify","petitionJson","commentJson","onClick","window","open","map","key","publicURL","ref","Button","as","href","defaultProps","components"],"sourceRoot":""}