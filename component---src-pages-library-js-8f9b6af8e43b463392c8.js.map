{"version":3,"file":"component---src-pages-library-js-8f9b6af8e43b463392c8.js","mappings":"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","sources":["webpack://phase-03/./src/components/Button.js","webpack://phase-03/./src/components/Comment.js","webpack://phase-03/./src/components/WordsIndex.js","webpack://phase-03/./src/components/Accordion.js","webpack://phase-03/./src/utils/mix.js","webpack://phase-03/./src/components/maskometerGrid.js","webpack://phase-03/./src/components/Comments.js","webpack://phase-03/./src/pages/library.js","webpack://phase-03/./src/utils/sentences.js","webpack://phase-03/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\n\nexport function ArchiveButton({children, className, isSelected, isCurrent, checkbox, ...props}) {\n\n    return <button\n        disabled={isCurrent}\n        className={\n            classNames(\n                \"archive-button border-2 select-none\",\n                checkbox ?\n                    [\n                        'checkbox ',\n                        !isCurrent && 'hover:border-light active:bg-light active:text-black',\n                        isCurrent && 'bg-gray border-white cursor-disabled opacity-30',\n                        isSelected && 'border-light'\n                    ] :\n                    [\n                        (!isCurrent && !isSelected) &&\n                        'text-white border-black hover:border-light',\n                        isSelected && \"bg-light text-black border-light\",\n                        isCurrent && 'bg-gray text-white'\n                    ],\n                className\n            )}\n        {...props}\n    >\n        {checkbox && isSelected && <span className={\"leading-[0] text-lg mr-1\"}>{'\\u00D7'}</span>}\n        <span>\n                    {children}\n\n        </span>\n    </button>\n}\n\n\nexport default function Button({children, id, as: As, after, large, light, ...props}) {\n    return <As id={id}\n               className={classNames(\"group inline-block flex items-middle\", light ? 'hover:text-light-darker' : 'hover:text-light')}\n               activeClassName={classNames(light ? \"border-light-darker text-light-darker\" : \"border-light text-light\")} {...props}>\n        <span\n            className={classNames(\n\n                (large ? 'py-4 px-8 text-2xl rounded-3xl' : ' text-lg py-1 px-4 rounded-2xl'),\n                \" border-current group-active:bg-light group-active:text-black border\"\n            )\n            }>\n                    {children}\n        </span>\n        {after}\n    </As>\n\n}\n\nButton.defaultProps = {\n    as: 'a'\n}","import React, {useState} from \"react\";\nimport classNames from \"classnames\";\nimport {matches, sentenceHasWord} from \"../utils/sentences\";\n\nexport function HighlightedWord({children, className, isActive, promask, nomask, secondary}) {\n    return <span\n        className={classNames(\n            'highlighted-word',\n            !promask && !nomask && 'before:bg-light',\n            secondary ?\n                [\n                    isActive && 'before:bg-light'\n                ] :\n                [\n                    promask && 'before:bg-promask',\n                    nomask && 'before:bg-nomask',\n                    isActive && (nomask || promask) && 'text-white',\n\n                ],\n            !isActive && 'before:scale-x-0',\n            className\n        )}\n    >\n        {children}\n    </span>\n}\n\nexport default function Comment({\n                                    id,\n                                    className,\n                                    children,\n                                    origin,\n                                    sentences,\n                                    user,\n                                    createdAt,\n                                    dateText,\n                                    word,\n                                    secondWord,\n                                    petition,\n                                    splitted,\n                                    petitionTitle,\n                                    highlightWords,\n                                    large\n                                }) {\n    let lastWasSkipped = false\n\n    const [showAll, setShowAll] = useState()\n\n    return <div\n        id={id}\n        className={classNames(\n            className,\n            \"comment grid grid-cols-9 w-full bg-white text-black boreder-2 normal-case\",\n            large ? 'p-16 rounded-[3rem] gap-8' : 'p-4  gap-4 rounded-xl text-base ',\n            origin === 'promask' && 'border-promask',\n            origin === 'nomask' && 'border-nomask'\n        )}>\n        <div className=\" \">\n            <div className={\"rounded-full bg-\" + origin} style={{aspectRatio: '1'}}/>\n        </div>\n        <div className={\"col-span-8\"}>\n            <div className={\"text-gray select-none \" + (large ? 'text-2xl' : 'text-xs')}>\n                <span>User{user}</span>\n                {' • '}\n                <span>{dateText || createdAt}</span>\n            </div>\n            <p className={'comment-text ' + (large ? 'text-3xl leading-snug py-4' : 'py-2 text-base')}>\n                {typeof sentences !== 'undefined' ? sentences.map((sentence, i) => {\n\n\n                    if (sentenceHasWord(sentence, word) || sentenceHasWord(sentence, secondWord)) {\n                        lastWasSkipped = false\n                        return <React.Fragment key={i}>{\n                            sentence.map((part, i) => {\n                                const isPrimaryWord = matches(part, word)\n                                const isSecondaryWord = matches(part, secondWord)\n\n                                if (isPrimaryWord || isSecondaryWord) return <React.Fragment\n                                    key={i}>{\" \"}\n                                    <HighlightedWord\n                                        isActive={highlightWords} promask={origin === 'promask'}\n                                        nomask={origin === 'nomask'} secondary={!isSecondaryWord}>\n                                        {part}\n                                    </HighlightedWord>\n                                </React.Fragment>\n\n                                if (part === secondWord) return <span key={i} className={\n                                    'border-light border-2'\n                                }>{part}</span>\n\n                                return part\n                            })\n                        }{\" \"}\n                        </React.Fragment>\n                    }\n\n                    if (!lastWasSkipped) {\n                        lastWasSkipped = true\n                        return \"[...] \"\n                    }\n\n\n                }) : children}\n            </p>\n            <a href={petition.slug ? \"https://www.change.org/p/\" + petition.slug : undefined} title={petition.title}\n               className={classNames(\"text-gray truncate  block \",\n                   petition.slug ? ' hover:text-light-darker underline' : 'cursor-default',\n                   large ? 'text-2xl' : 'text-xs')}\n               target={'_blank'}>\n                {petition.title || \"Petition title\"}\n            </a>\n        </div>\n\n    </div>\n\n}\n\n\nComment.defaultProps = {\n    highlightWords: true\n}","import classNames from \"classnames\";\nimport React from \"react\";\n\nexport default function Index({words, chosen, setChosen}) {\n\n    return <div className={classNames(\n        \"duration-1000 flex flex-col\",\n        chosen.current ? \"w-2/12 border-r-2 border-t2 border-r-white\" : \"w-full \"\n    )}>\n        <div\n            className={\"sticky top-0 text-light px-8 pt-4 pb-4 border-white border-b-2 duration-1000 bg-black select-none  whitespace-nowrap \" + (!chosen.current && 'w-full cursor-pointer')}\n            onClick={() => setChosen({})}\n        >\n            <h2\n                className={\n                    classNames(\"inline-block text-2xl uppercase \")\n                }\n            >\n                Words\n            </h2>\n            <span\n                className={classNames(\"ml-2 text-light text-2xl\", chosen.current ? \"hidden\" : \"\")}>/ 20 most used in promask and nomask comments</span>\n\n        </div>\n\n        <ul className=\"overflow-y-scroll no-scrollbar flex-1\">\n            {words\n                .map(({name, finding}, index) => {\n                    let isNextSelected = index+1 < words.length ? (words[index + 1].name === chosen.prev || words[index + 1].name === chosen.current) : false\n\n                    return <li\n                        key={name}\n                        onClick={() => chosen.current !== name ? setChosen({current: name}) : setChosen({})}\n                        className={classNames(\n                            \"border-y-[1px] cursor-pointer hover:border-t-light\",\n                            \"px-8 pt-4 pb-4\",\n                            !isNextSelected && \"border-b-current\",\n                            chosen.current === name ? \"bg-light text-black border-t-light\" : \"hover:text-light border-t-black\",\n                        )}\n                    >\n                        <h2 className={classNames(\n                            \"text-lg uppercase\",\n                        )}>\n                            {name}\n                        </h2>\n                        {(chosen.current === name && finding) && <p className={\"pt-1 text-base\"}>\n                            {finding}\n                        </p>}\n                    </li>\n                })}\n        </ul>\n    </div>\n\n}","import React from \"react\";\nimport classNames from \"classnames\";\n\nexport default function Accordion({onClick, isOpen, children, title, subtitle}) {\n\n\n    return <div className={\"flex-grow flex flex-col last:border-t-white last:border-t-2 \" + (isOpen ? \"h-full\": '')}>\n        <div\n            className={\"pt-4 pb-4 px-8 border-y-white box-border flex justify-between group select-none cursor-pointer text-light \" }\n            onClick={onClick}\n        >\n            <div className={\"whitespace-nowrap \"}>\n                <h2\n                    className={\"text-2xl uppercase inline-block\"}\n                >\n                    {title}\n                </h2>\n                <span\n                    className={classNames(\"ml-2 leading-none text-xl transition-[opacity] normal-case\", isOpen ? \"\" : \"group-hover:inline-block group-active:opacity-100\")}>\n                    / {subtitle}\n                </span>\n\n            </div>\n\n            <div>\n                <svg width=\"25\" height=\"25\" viewBox=\"0 0 25 25\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                     <path d=\"M0 12.5L25 12.5\" stroke=\"currentColor\" strokeWidth=\"2\"/>\n                    {!isOpen && <path d=\"M12.5 25L12.5 -1.04308e-06\" stroke=\"currentColor\" strokeWidth=\"2\"/>}\n                </svg>\n            </div>\n\n        </div>\n\n        <div className={classNames(\n            \"\",\n            isOpen ? \"h-full\" : 'h-0 overflow-hidden'\n        )}>\n            {children}\n\n        </div>\n    </div>\n}\n\n\nAccordion.defaultProps = {\n    onToggle: () => {\n    }\n}","function d2h(d) {\n    return d.toString(16);\n}  // convert a decimal value to hex\nfunction h2d(h) {\n    return parseInt(h, 16);\n} // convert a hex value to decimal\n\n\nexport function mix(color_1, color_2, weight) {\n    weight = (typeof (weight) !== 'undefined') ? weight : 50; // set the weight to 50%, if that argument is omitted\n\n    let color = \"#\";\n\n    for (let i = 0; i <= 5; i += 2) { // loop through each of the 3 hex pairs—red, green, and blue\n        let v1 = h2d(color_1.substr(i, 2)), // extract the current pairs\n            v2 = h2d(color_2.substr(i, 2)),\n\n            // combine the current pairs from each source color, according to the specified weight\n            val = d2h(Math.floor(v2 + (v1 - v2) * (weight / 100.0)));\n\n        while (val.length < 2) {\n            val = '0' + val;\n        } // prepend a '0' if val results in a single digit\n\n        color += val; // concatenate val to our new color string\n    }\n\n    return color; // PROFIT!\n}","import React, {useState} from \"react\";\nimport classNames from \"classnames\";\nimport {ArchiveButton} from \"./Button\";\nimport {mix} from \"../utils/mix\";\n\n\nexport function MaskometerGrid({chosen, words, distribution, onClickSecondWord}) {\n\n\n    return <div className=\"h-full flex flex-col justify-between relative gap-4  \">\n        <p className={\"mx-8 mb-4 text-lg\"}>\n            Horizontal position corresponds to usage by the two groups in the selcted corpus of reasons to sign\n        </p>\n        <div className=\"flex-1 \">\n            <div\n                className={classNames(\" h-full px-8 py-4 flex flex-col justify-between relative\", 'overflow-hidden')}>\n                <div className={\"z-1 uppercase\"}>\n\n                    <p className=\"bg-promask text-white text-lg text-center h-full absolute top-0 bottom-0 left-0 rotate-180 p-1 z-10\"\n                       style={{writingMode: 'vertical-lr'}}>\n                        Promask\n                    </p>\n\n                    <p className=\"bg-nomask text-white text-lg text-center h-full absolute top-0 bottom-0 right-0 p-1 z-10\"\n                       style={{writingMode: 'vertical-rl'}}>\n                        Nomask\n                    </p>\n\n                    <div\n                        className=\"absolute top-0 bottom-0 right-1/2 translate-x-1/2 border-r-[1px] boreder-r-white border-dashed opacity-50\"/>\n\n                    <p className=\"text-lg text-sm 2xl:text-base text-center text-gray select-none absolute top-0 left-0 right-0 w-full normal-case bg-black pb-2\"\n                    >\n                        equally used\n                    </p>\n\n                </div>\n\n                {(typeof chosen !== 'undefined' && chosen.current) ?\n                    words.nodes.map(({name}) => {\n\n                        let isCurrent = chosen.next ? chosen.next === name : chosen.current === name\n\n\n                        let delta = distribution\n                            .find(({\n                                       word,\n                                       secondWord\n                                   }) => {\n\n                                if (chosen.next) {\n                                    return chosen.next === word && secondWord === name\n                                }\n                                return (chosen.current && word === chosen.current) && secondWord === name\n                            })['nomaskDelta']\n\n                        delta = Math.round(delta * 100)\n\n                        return <div key={name}\n                                    className={\n                                        classNames(\n                                            \"w-full flex items-center relative\",\n                                            \"before:absolute before:left-0 before:right-0 \",\n                                            \"before:border-b-[1px] before:block before:top-1/2 before:transition-all\",\n                                            \"before:w-full transition-[margin,background-color] duration-500\",\n                                            isCurrent ? 'before:border-b-gray  opacity-30' : 'before:border-b-current  before:opacity-20'\n                                        )\n                                    }>\n                            <ArchiveButton\n                                isCurrent={isCurrent}\n                                style={{\n                                    marginLeft: delta + \"%\",\n                                    '--gradient-mix': isCurrent ? undefined : mix('EA3C9A', '3514FF', delta)\n                                }}\n                                className={\"transition-[margin] duration-1000 rounded-[0px] -translate-x-1/2 absolute z-20\"}\n                                onClick={() => onClickSecondWord(name)}\n                            >\n                                {name}\n                            </ArchiveButton>\n                        </div>\n                    }) : <div className=\"p-20 text-7xl w-3/4 opacity-50 upppercase\">\n                        click on one of the most used words to see how the related words are used by the two groups\n                        in the comments\n                    </div>\n                }\n            </div>\n\n        </div>\n    </div>\n}","import React, {useEffect, useMemo, useRef} from \"react\";\nimport classNames from \"classnames\";\nimport Comment from \"./Comment\";\nimport {ArchiveButton} from \"./Button\";\nimport {mix} from \"../utils/mix\";\nimport {sentencesHaveWord} from \"../utils/sentences\";\n\n\nfunction GroupCommentList({comments, chosen, secondWord, origin}) {\n\n    const {filteredComments, totalComments} = useMemo(() => {\n        let thisOriginComments = comments\n            .filter(({origin: o}) => origin === o)\n\n\n        return {\n            totalComments: thisOriginComments.length,\n            filteredComments: thisOriginComments\n                .filter(({sentences}) => {\n                    return !secondWord || sentencesHaveWord(sentences, secondWord)\n                })\n        }\n    }, [secondWord, origin, chosen])\n\n\n    return <div>\n        <p className=\"sticky top-[8.05rem] bg-black z-30 text-center text-lg pt-3 pb-4\">\n            {filteredComments.length}{secondWord && \" of \" + totalComments + ` (${(100 * filteredComments.length / totalComments).toFixed(0)}%)`} {origin} opinions\n        </p>\n\n        <div key={origin} className={\"grid gap-4 pb-64 \"}> {filteredComments\n            .map(\n                (c) => <Comment key={c.id}\n                                highlightWords={true}\n                                word={chosen}\n                                secondWord={secondWord} {...c} />\n            )}\n\n        </div>\n    </div>\n}\n\nexport default function Comments({comments, chosen, secondWord, onChangeSecondWord, distribution}) {\n\n    const scroller = useRef()\n\n    useEffect(() => {\n        scroller.current?.scrollTo(0, 0)\n    }, [chosen, secondWord])\n\n\n    return <div className={\"flex h-full px-8 flex-wrap \"}>\n        <p className=\"mb-4 w-full text-lg\">Here you can read the reasons to sign the 100 most popular promask and nomask\n            petition</p>\n        <div className=\"flex flex-col h-full w-full overflow-y-scroll no-scrollbar\" ref={scroller}>\n\n            <div className={\"w-full sticky top-0 bg-black z-20\"}>\n                <h2 className={\"text-lg text-light my-4\"}>Filter opinions by:</h2>\n                <div className=\"flex flex-wrap gap-x-2\">\n                    {distribution.map(({secondWord: word, nomaskDelta}) => {\n                        const isSelected = secondWord === word\n                        const isCurrent = chosen === word\n\n                        return <ArchiveButton\n                            key={word}\n                            checkbox\n                            isCurrent={isCurrent}\n                            className={\"mb-2\"}\n                            isSelected={isSelected}\n                            onClick={() => onChangeSecondWord(isSelected ? undefined : word)}\n                            style={{\n                                '--gradient-mix': mix('EA3C9A', '3514FF', nomaskDelta * 100)\n                            }}\n                        >\n                            {word}\n                        </ArchiveButton>\n                    })}\n                </div>\n            </div>\n            <div\n                className={classNames(\"transition-transform w-full md:w-11/12 3xl:w-10/12 mx-auto\")}\n                id={\"comments-container\"}>\n                <div className=\"grid grid-cols-2 gap-8 justify-around \">\n                    {['promask', 'nomask'].map(origin => <GroupCommentList key={origin} origin={origin}\n                                                                           comments={comments}\n                                                                           chosen={chosen} secondWord={secondWord}/>)}\n                </div>\n            </div>\n        </div>\n    </div>\n}","import React, {useEffect, useMemo, useState} from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/Layout\";\nimport classNames from \"classnames\";\nimport WordsIndex from \"../components/WordsIndex\";\nimport Accordion from \"../components/Accordion\";\nimport {MaskometerGrid} from \"../components/maskometerGrid\";\nimport Comments from \"../components/Comments\";\nimport {sentencesHaveWord} from \"../utils/sentences\";\n\nexport default function Library({data: {words, allComments, ...data}}) {\n    const [chosen, setChosen] = useState({})\n    const [secondWord, setSecondWord] = useState()\n    const [showComments, setShowComments] = useState(false)\n\n    const filteredComments = useMemo(() => allComments\n            .nodes\n            .filter(({sentences}) => {\n                return sentencesHaveWord(sentences, chosen.current)\n            }),\n        [chosen.current])\n\n    useEffect(() => {\n        !showComments && secondWord && setShowComments(true)\n    }, [secondWord])\n\n    useEffect(() => {\n        !chosen.next && setSecondWord()\n    }, [chosen])\n\n    const listOfChosenWords = words.nodes.map(x => x.name)\n\n    const distribution = data\n        .distribution\n        .nodes\n        .filter(i => {\n            return listOfChosenWords.findIndex(x => x === i.secondWord) !== -1\n        })\n\n\n    return <Layout wrapperClassName={\"max-h-screen h-screen flex flex-col\"}\n                   navClassName={\"!text-black\"}\n                   className={\"flex-1 min-h-0 \"}>\n        <div className=\"w-full h-full overflow-hidden flex flex-nowrap  border-y-white border-t-2 \">\n            <WordsIndex words={words.nodes} chosen={chosen} setChosen={setChosen}/>\n            <div className={classNames(\n                'transition-[width] duration-1000 overflow-hidden flex flex-col',\n                chosen.current ? 'w-10/12' : 'w-0'\n            )}>\n                <Accordion title={\"Related words\"} subtitle={<>usage of words mentioned with <span\n                    className=\"uppercase\">{chosen.current}</span></>}\n                           isOpen={!showComments} onClick={() => setShowComments(!showComments)}>\n                    <MaskometerGrid chosen={chosen} words={words} distribution={distribution}\n                                    onClickSecondWord={setSecondWord}/>\n                </Accordion>\n                <Accordion title={\"Opinions\"}\n                           subtitle={<>containing <span\n                               className=\"uppercase\">{chosen.current}</span> {secondWord && <>and <span\n                               className=\"uppercase\">{secondWord}</span></>}  </>}\n                           isOpen={showComments} onClick={() => setShowComments(!showComments)}>\n                    <Comments\n                        comments={filteredComments}\n                        distribution={distribution.filter(({word}) => word === chosen.current)}\n                        chosen={chosen.current}\n                        secondWord={secondWord}\n                        onChangeSecondWord={setSecondWord}\n                    />\n                </Accordion>\n            </div>\n        </div>\n    </Layout>\n}\n\nexport const query = graphql`query Glossary {\n    words: allSheetsScatter(filter: {scelta: {eq: \"X\"}}, sort: {order: ASC, fields: [name]}){\n        nodes{\n            name\n            deltaPromask\n            finding\n        }\n    }\n    distribution: allSheetsDistribuzioneV2(sort: {order: ASC, fields: [secondWord]}) {\n        nodes {\n            word\n            secondWord\n            nomaskDelta\n            promaskDelta\n        }\n    }\n    allComments: allCommentsJson(sort: {fields: [createdAt], order: DESC}) {\n        nodes {\n            ...CommentJsonFragment\n        }\n    }\n}`\n","import replacer from '../data/replace.json'\n\n\nconsole.log(replacer)\n\nexport function matches(part, word) {\n    if (!part)\n        return false;\n\n    if (part.toLowerCase() === word) {\n        return true;\n    }\n\n    if (part.toLocaleString() === replacer[word]) {\n        console.log(\"replacer found\")\n        return true\n    }\n\n    return false;\n    return part && (part.toLowerCase() === word || part.toLowerCase() === replacer[word])\n}\n\nexport function sentenceHasWord(sentence, word) {\n    return sentence.findIndex(p => matches(p, word)) !== -1\n}\n\nexport function sentencesHaveWord(sentences, word) {\n    for (const sentence of sentences) {\n        if (sentenceHasWord(sentence, word)) {\n            return true\n        }\n    }\n\n    return false\n}\n\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["ArchiveButton","children","className","isSelected","isCurrent","checkbox","props","disabled","classNames","Button","id","As","as","after","large","light","activeClassName","defaultProps","HighlightedWord","isActive","promask","nomask","secondary","Comment","origin","sentences","user","createdAt","dateText","word","secondWord","petition","highlightWords","splitted","petitionTitle","lastWasSkipped","useState","style","aspectRatio","map","sentence","i","sentenceHasWord","key","part","isPrimaryWord","matches","isSecondaryWord","href","slug","undefined","title","target","Index","words","chosen","setChosen","current","onClick","index","name","finding","isNextSelected","length","prev","Accordion","isOpen","subtitle","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","onToggle","h2d","h","parseInt","mix","color_1","color_2","weight","color","v1","substr","v2","val","Math","floor","toString","MaskometerGrid","distribution","onClickSecondWord","writingMode","nodes","next","delta","find","round","marginLeft","GroupCommentList","comments","useMemo","thisOriginComments","filter","o","totalComments","filteredComments","sentencesHaveWord","toFixed","c","Comments","onChangeSecondWord","scroller","useRef","useEffect","scrollTo","ref","nomaskDelta","Library","data","allComments","setSecondWord","showComments","setShowComments","listOfChosenWords","x","findIndex","Layout","wrapperClassName","navClassName","toLowerCase","toLocaleString","replacer","console","log","p","_objectWithoutPropertiesLoose","source","excluded","sourceKeys","Object","keys","indexOf"],"sourceRoot":""}