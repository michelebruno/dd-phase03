{"version":3,"file":"component---src-pages-glossary-js-b426d20b5fa0d51eb083.js","mappings":"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","sources":["webpack://phase-03/./src/components/Comment.js","webpack://phase-03/./src/components/WordsIndex.js","webpack://phase-03/./src/components/Accordion.js","webpack://phase-03/./src/components/maskometerGrid.js","webpack://phase-03/./src/components/Comments.js","webpack://phase-03/./src/pages/glossary.js"],"sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\n\nexport function HighlightedWord({children, className, isActive, promask, nomask, black}) {\n    return <span\n        className={classNames(\n            'highlighted-word',\n            \"relative inline-block z-[0]\",\n            \"transition-colors duration-1000 text-white\",\n            \"before:z-[-1] before:absolute\",\n            \"before:transition-all before:duration-1000 before:origin-left\",\n            \"before:h-full before:w-full\",\n            !promask && !nomask && 'before:bg-light',\n            promask && 'before:bg-promask',\n            nomask && 'before:bg-nomask',\n            !isActive && 'before:scale-x-0',\n            className\n        )}\n    >\n        {children}\n    </span>\n}\n\nexport default function Comment({\n                                    id,\n                                    className,\n                                    children,\n                                    origin,\n                                    petitionLink,\n                                    likes,\n                                    author,\n                                    date,\n                                    dateText,\n                                    word,\n                                    secondWord,\n                                    splitted,\n                                    petitionTitle,\n                                    highlightWords,\n                                    large\n                                }) {\n\n\n    if (secondWord && splitted.findIndex(s => s === secondWord) === -1)\n        return null;\n\n    return <div\n        id={id}\n        className={classNames(\n            className,\n            \"comment flex w-full bg-white text-black boreder-2 normal-case\",\n            large ? 'p-8 rounded-3xl' : 'p-4 rounded-xl text-base ',\n            origin === 'promask' && 'border-promask',\n            origin === 'nomask' && 'border-nomask'\n        )}>\n        <div className=\"w-2/12 \">\n            <div className={\"mr-[25%] rounded-full bg-\" + origin} style={{aspectRatio: '1'}}/>\n        </div>\n        <div className={\"w-10/12\"}>\n            <div className={\"text-[#A2A2A2] \" + (large ? 'text-3xl' : 'text-base')}>\n                <span>{author}</span>\n                {' â€¢ '}\n                <span>{dateText || date}</span>\n            </div>\n            <p className={'comment-text ' + (large ? 'text-7xl leading-snug py-4' : '')}>\n                {typeof splitted !== 'undefined' ? splitted.map((part, i) => {\n                    if (part.toLowerCase() === word || part.toLowerCase() === secondWord) return <React.Fragment key={i}>{\" \"}\n                        <HighlightedWord\n                            isActive={highlightWords} promask={origin === 'promask'}\n                            nomask={origin === 'nomask'}>\n                            {part}\n                        </HighlightedWord>\n                    </React.Fragment>\n\n                    if (part === secondWord) return <span key={i} className={\n                        'border-light border-2'\n                    }>{part}</span>\n\n                    return part\n                }) : children}\n            </p>\n            <p className={\"text-[#A2A2A2] \" + (large ? 'text-2xl' : 'text-base')}>\n                <a href={petitionLink} className={\"underline\"} target={'_blank'}>{petitionTitle}</a>\n            </p>\n        </div>\n\n    </div>\n\n}\n\n\nComment.defaultProps = {\n    highlightWords: true\n}","import classNames from \"classnames\";\nimport React from \"react\";\n\nexport default function Index({words, chosen, setChosen}) {\n\n\n    return <div className={classNames(\n        \"transition-all duration-1000 overflow-y-scroll\",\n        chosen.current ? \"w-2/12 border-r-2 border-r-current\" : \"w-full \"\n    )}>\n        <h2 className={\n            classNames(\"sticky top-0 text-3xl uppercase p-8 border-current border-y-2 transition-[width] duration-1000 bg-black\", !chosen.current && 'w-screen')\n        }>\n            Words\n        </h2>\n\n        <ul className=\"pb-8\">\n            {words\n                .map(({name, link}) => <li\n                    key={name}\n                    onMouseEnter={() => setChosen(\n                        c => ({current: c.current, next: name})\n                    )}\n                    onMouseLeave={() => setChosen(c => ({...c, next: undefined}))}\n                    onClick={() => chosen.current !== name ? setChosen({current: name}) : setChosen({})}\n                    className={classNames(\"text-xl uppercase\",\n                        \"px-8 py-8\",\n                        \"border-b-[1px] border-current cursor-pointer\",\n                        \"hover:bg-light hover:text-black\",\n                        chosen.current === name && \"bg-light text-black\"\n                    )}\n                >\n                    {name}\n                </li>)}\n        </ul>\n    </div>\n\n}","import React from \"react\";\nimport classNames from \"classnames\";\n\nexport default function Accordion({onClick, isOpen, children, title}) {\n\n\n    return <div className={\"flex-grow flex flex-col \" + (isOpen && \"h-full\")}>\n        <h2 className={\"p-8 text-3xl uppercase border-y-2 border-y-current box-border \" + (title === 'Comments' && '-mx-[2px]')}\n            onClick={onClick}\n        >{title}</h2>\n        <div className={classNames(\n            \"overflow-hidden\",\n            \"transition-all duration-1000 \",\n            isOpen ? \"h-full\" : 'h-0'\n        )}>\n            {children}\n\n        </div>\n    </div>\n}\n\n\nAccordion.defaultProps = {\n    onToggle: () => {\n    }\n}","import React, {useState} from \"react\";\nimport classNames from \"classnames\";\nimport {ArchiveButton} from \"./Button\";\n\n\nexport function MaskometerGrid({chosen, words, distribution}) {\n    const [secondWord, setSecondWord] = useState()\n\n\n    return <div className=\"h-full flex flex-col justify-between relative gap-4 \">\n        <div className=\"flex-1 \">\n            <div\n                className={classNames(\" h-full px-8 py-4 flex flex-col justify-between relative\", 'overflow-hidden')}>\n                <div className={\"z-1 uppercase\"}>\n\n                    <p className=\"bg-promask text-white text-lg text-center h-full absolute top-0 bottom-0 left-0\"\n                       style={{writingMode: 'vertical-lr'}}>\n                        Promask\n                    </p>\n\n                    <p className=\"bg-nomask text-white text-lg text-center h-full absolute top-0 bottom-0 right-0\"\n                       style={{writingMode: 'vertical-rl'}}>\n                        Nomask\n                    </p>\n                </div>\n\n                {(typeof chosen !== 'undefined' && chosen.current) ?\n                    words.nodes.map(({name, deltaPromask}) => {\n\n                        let isCurrent = name === chosen.current\n                        let isSelected = name === secondWord\n                        if (isCurrent) {\n                            delta = deltaPromask\n                        }\n\n                        let delta = isCurrent ?\n                            deltaPromask :\n                            distribution\n                                .nodes\n                                .find(({\n                                           word,\n                                           secondWord\n                                       }) => {\n\n                                    if (chosen.next) {\n                                        return chosen.next === word && secondWord === name\n                                    }\n                                    return (chosen.current && word === chosen.current) && secondWord === name\n                                })['promaskDelta']\n\n\n                        delta = Math.round(delta * 100)\n\n                        return <div key={name}\n                                    className={\n                                        classNames(\n                                            \"w-full flex items-center relative\",\n                                            \"before:absolute before:left-0 before:right-0 my-1\",\n                                            \"before:border-b-[1px] before:block before:top-1/2 before:transition-all\",\n                                            \"before:w-full\",\n                                            isCurrent ? 'before:border-b-gray' : 'before:border-b-current'\n                                        )\n                                    }>\n                            <ArchiveButton\n                                isCurrent={isCurrent}\n                                style={{\n                                    marginLeft: delta + \"%\"\n                                    // backgroundColor: mix('6147FF', 'CFFF58', delta)\n                                }}\n                                className={\"transition-[margin] duration-1000 delay-200 rounded-[0px] -translate-x-1/2\"}\n                            >\n                                {name}\n                            </ArchiveButton>\n                        </div>\n                    }) : <div className=\"p-20 text-7xl w-3/4 opacity-50 upppercase\">\n                        click on one of the most used words to see how the related words are used by the two groups\n                        in the comments\n                    </div>\n                }\n            </div>\n\n        </div>\n    </div>\n}","import React from \"react\";\nimport classNames from \"classnames\";\nimport Comment from \"./Comment\";\nimport Button, {ArchiveButton} from \"./Button\";\n\n\nexport default function Comments({comments, chosen, secondWord, onChangeSecondWord, words}) {\n\n    return <div className={\"flex h-full px-8\"}>\n        <div className={\"w-3/12\"}>\n            {words.map(({name}) => {\n                const isSelected = secondWord === name\n                const isCurrent = chosen === name\n\n                return <ArchiveButton\n                    key={name}\n                    className={\"mt-2\"}\n                    isCurrent={isCurrent}\n                    isSelected={isSelected}\n                    onClick={() => onChangeSecondWord(isSelected ? undefined : name)}\n                >\n                    {name}\n                </ArchiveButton>\n            })}\n        </div>\n        <div\n            className={classNames(\"transition-transform w-9/12 overflow-y-scroll \")}\n            id={\"comments-container\"}>\n            <div className=\"grid grid-cols-2 gap-8 justify-around \">\n                {['promask', 'nomask'].map(origin =>\n                    <div key={origin} className={\"flex flex-col gap-8 pb-64 \"}>\n                        {comments\n                            .filter(({origin: o}) => origin === o)\n                            .map(\n                                (c) => <Comment key={c.id}\n                                                highlightWords={true}\n                                                word={chosen.current}\n                                                secondWord={secondWord} {...c} />\n                            )}\n\n                    </div>)}\n            </div>\n        </div>\n    </div>\n}","import React, {useState} from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/Layout\";\nimport classNames from \"classnames\";\nimport WordsIndex from \"../components/WordsIndex\";\nimport Accordion from \"../components/Accordion\";\nimport {MaskometerGrid} from \"../components/maskometerGrid\";\nimport Comments from \"../components/Comments\";\n\n\nexport default function Glossary({data: {words, distribution, allComments}}) {\n    const [chosen, setChosen] = useState({})\n    const [secondWord, setSecondWord] = useState()\n    const [showComments, setShowComments] = useState(false)\n\n    return <Layout wrapperClassName={\"max-h-screen h-screen flex flex-col\"}\n                   className={\"flex-1 min-h-0 \"}>\n        <div className=\"w-full h-full overflow-hidden flex flex-nowrap\">\n            <WordsIndex words={words.nodes} chosen={chosen} setChosen={setChosen}/>\n            <div className={classNames(\n                'transition-[width] duration-1000 overflow-hidden flex flex-col ',\n                chosen.current ? 'w-10/12' : 'w-0'\n            )}>\n                <Accordion title={\"Maskometer\"} isOpen={!showComments} onClick={() => setShowComments(!showComments)}>\n                    <MaskometerGrid chosen={chosen} words={words} distribution={distribution} />\n                </Accordion>\n                <Accordion title={\"Comments\"} isOpen={showComments} onClick={() => setShowComments(!showComments)}>\n                    <Comments\n                        comments={allComments.nodes.filter(({word}) => word === chosen.current)}\n                        words={words.nodes}\n                        chosen={chosen.current}\n                        secondWord={secondWord}\n                        onChangeSecondWord={setSecondWord}\n                    />\n                </Accordion>\n            </div>\n        </div>\n    </Layout>\n}\n\nexport const query = graphql`query Glossary {\n    words: allSheetsScatter(filter: {scelta: {eq: \"X\"}}, sort: {order: ASC, fields: [name]}){\n        nodes{\n            name\n            scelta\n            deltaPromask\n        }\n    }\n    distribution: allSheetsDistribuzioneV2 {\n        nodes {\n            word\n            secondWord\n            nomaskDelta\n            promaskDelta\n        }\n    }\n    allComments: allSheetsEstratti(filter: {scelto: {eq: \"x\"}}) {\n        nodes {\n            ...CommentFragment\n        }\n    }\n}`\n"],"names":["HighlightedWord","children","className","isActive","promask","nomask","black","classNames","Comment","id","origin","petitionLink","author","likes","date","dateText","word","secondWord","splitted","petitionTitle","highlightWords","large","findIndex","s","style","aspectRatio","map","part","i","toLowerCase","key","href","target","defaultProps","Index","words","chosen","setChosen","current","name","link","onMouseEnter","c","next","onMouseLeave","undefined","onClick","Accordion","isOpen","title","onToggle","MaskometerGrid","distribution","useState","writingMode","nodes","deltaPromask","isCurrent","delta","find","Math","round","marginLeft","Comments","comments","onChangeSecondWord","isSelected","filter","o","Glossary","data","allComments","setSecondWord","showComments","setShowComments","Layout","wrapperClassName"],"sourceRoot":""}