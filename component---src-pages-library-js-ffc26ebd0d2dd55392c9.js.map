{"version":3,"file":"component---src-pages-library-js-ffc26ebd0d2dd55392c9.js","mappings":"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","sources":["webpack://phase-03/./src/components/Comment.js","webpack://phase-03/./src/components/WordsIndex.js","webpack://phase-03/./src/components/Accordion.js","webpack://phase-03/./src/utils/mix.js","webpack://phase-03/./src/components/maskometerGrid.js","webpack://phase-03/./src/components/Comments.js","webpack://phase-03/./src/pages/library.js","webpack://phase-03/./src/utils/sentences.js"],"sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport {matches, sentenceHasWord} from '../utils/sentences';\n\nexport function HighlightedWord({children, className, isActive, promask, nomask, secondary}) {\n  return (\n    <span\n      className={classNames(\n        'highlighted-word',\n        !promask && !nomask && 'before:bg-light',\n        secondary\n          ? [isActive && 'before:bg-light']\n          : [\n              promask && 'before:bg-promask',\n              nomask && 'before:bg-nomask',\n              isActive && (nomask || promask) && 'text-white',\n            ],\n        !isActive && 'before:scale-x-0',\n        className\n      )}\n    >\n      {children}\n    </span>\n  );\n}\n\nexport default function Comment({\n  id,\n  className,\n  children,\n  origin,\n  sentences,\n  user,\n  createdAt,\n  word,\n  secondWord,\n  petition,\n  highlightWords,\n  large,\n}) {\n  let lastWasSkipped = false;\n\n  return (\n    <div\n      id={id}\n      className={classNames(\n        className,\n        'comment',\n        large && 'large',\n        origin === 'promask' && 'border-promask',\n        origin === 'nomask' && 'border-nomask'\n      )}\n    >\n      <div className=\" \">\n        <div className={`rounded-full avatar bg-${origin}`} />\n      </div>\n      <div className=\"col-span-11\">\n        <div className={`text-gray select-none ${large ? 'text-xl' : 'text-sm 2xl:text-xs'}`}>\n          <span>User{user}</span>\n          {' • '}\n          <span>{createdAt}</span>\n        </div>\n        <p className={`comment-text ${large ? 'text-3xl leading-snug py-3' : 'py-2 text-base'}`}>\n          {typeof sentences !== 'undefined'\n            ? sentences.map((sentence, i) => {\n                if (sentenceHasWord(sentence, word) || sentenceHasWord(sentence, secondWord)) {\n                  lastWasSkipped = false;\n                  return (\n                    <React.Fragment key={i}>\n                      {sentence.map((part, i) => {\n                        const isPrimaryWord = matches(part, word);\n                        const isSecondaryWord = matches(part, secondWord);\n\n                        if (isPrimaryWord || isSecondaryWord)\n                          return (\n                            <React.Fragment key={i}>\n                              {' '}\n                              <HighlightedWord\n                                isActive={highlightWords}\n                                promask={origin === 'promask'}\n                                nomask={origin === 'nomask'}\n                                secondary={!isSecondaryWord}\n                              >\n                                {part}\n                              </HighlightedWord>\n                            </React.Fragment>\n                          );\n\n                        if (part === secondWord)\n                          return (\n                            <span key={i} className=\"border-light border-2\">\n                              {part}\n                            </span>\n                          );\n\n                        return part;\n                      })}{' '}\n                    </React.Fragment>\n                  );\n                }\n\n                if (!lastWasSkipped) {\n                  lastWasSkipped = true;\n                  return '[...] ';\n                }\n\n                return undefined;\n              })\n            : children}\n        </p>\n        <a\n          href={petition.slug ? `https://www.change.org/p/${petition.slug}` : undefined}\n          title={petition.title}\n          className={classNames(\n            'text-gray truncate  block ',\n            petition.slug ? ' hover:text-light-darker underline' : 'cursor-default',\n            large ? 'text-xl' : 'text-sm 2xl:text-xs'\n          )}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          {petition.title || 'Petition title'}\n        </a>\n      </div>\n    </div>\n  );\n}\n\nComment.defaultProps = {\n  highlightWords: true,\n};\n","import classNames from 'classnames';\nimport React from 'react';\n\nexport default function Index({words, chosen, setChosen}) {\n  return (\n    <div\n      className={classNames(\n        'duration-500 flex flex-col',\n        chosen.current ? 'w-2/12 border-r-2 border-t2 border-r-white' : 'w-full '\n      )}\n    >\n      <div\n        className={`sticky top-0 text-light px-8 pt-4 pb-4 border-white border-b-2 duration-1000 bg-black select-none  whitespace-nowrap ${\n          !chosen.current && 'w-full cursor-pointer'\n        }`}\n        onClick={() => setChosen({})}\n      >\n        <h2 className={classNames('inline-block text-2xl uppercase ')}>Words</h2>\n        <span\n          className={classNames(\n            'ml-2 text-light text-2xl overflow-hidden',\n            chosen.current ? 'hidden' : ''\n          )}\n        >\n          <span className=\"animate__animated animate__fadeInLeft\">\n            / 20 most used in promask and nomask comments\n          </span>\n        </span>\n      </div>\n\n      <ul className=\"overflow-y-scroll no-scrollbar flex-1 words-list\">\n        {words.map(({name, finding}, index) => {\n          const isNextSelected =\n            index + 1 < words.length\n              ? words[index + 1].name === chosen.next || words[index + 1].name === chosen.current\n              : false;\n\n          return (\n            <li\n              role=\"listitem\"\n              key={name}\n              onClick={() => (chosen.current !== name ? setChosen({current: name}) : setChosen({}))}\n              className={classNames(\n                'word-item last:border-b-current',\n                !isNextSelected && 'border-b-black ',\n                chosen.current === name ? 'active' : ''\n              )}\n            >\n              <h2 className={classNames('text-lg uppercase')}>{name}</h2>\n              {chosen.current === name && finding && (\n                <p className=\"pt-1 text-base animate__fadeInUp animate__animated max-w-[15.6vw]\">\n                  {finding}\n                </p>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import React from 'react';\nimport classNames from 'classnames';\n\nexport default function Accordion({onClick, isOpen, children, title, subtitle}) {\n  const panelId = `${title.replace(' ', '-').toLowerCase()}-tabpanel`;\n  return (\n    <div\n      className={`flex flex-col last:border-t-white last:border-t-2 ${\n        isOpen ? 'min-h-0 flex-1' : ''\n      }`}\n    >\n      <div\n        className=\"pt-4 pb-4 px-8 border-y-white box-border flex justify-between group select-none cursor-pointer text-light \"\n        onClick={onClick}\n        aria-controls={`#${panelId}`}\n        role=\"tab\"\n      >\n        <div className=\"whitespace-nowrap \">\n          <h2 className=\"text-2xl uppercase inline-block\">{title}</h2>\n          <span\n            className={classNames(\n              'ml-2 leading-none text-xl normal-case',\n              isOpen ? '' : 'group-hover:inline-block group-active:opacity-100'\n            )}\n          >\n            / {subtitle}\n          </span>\n        </div>\n\n        <div>\n          <svg\n            width=\"25\"\n            height=\"25\"\n            viewBox=\"0 0 25 25\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path d=\"M0 12.5L25 12.5\" stroke=\"currentColor\" strokeWidth=\"2\" />\n            {!isOpen && (\n              <path d=\"M12.5 25L12.5 -1.04308e-06\" stroke=\"currentColor\" strokeWidth=\"2\" />\n            )}\n          </svg>\n        </div>\n      </div>\n\n      <div\n        id={panelId}\n        role=\"tabpanel\"\n        aria-expanded={isOpen}\n        className={classNames('', isOpen ? 'min-h-0 flex-1' : 'h-0 overflow-hidden')}\n      >\n        {children}\n      </div>\n    </div>\n  );\n}\n\nAccordion.defaultProps = {\n  onToggle: () => {},\n};\n","function d2h(d) {\n  return d.toString(16);\n} // convert a decimal value to hex\nfunction h2d(h) {\n  return parseInt(h, 16);\n} // convert a hex value to decimal\n\nexport function mix(color1, color2, w) {\n  const weight = typeof w !== 'undefined' ? w : 50; // set the weight to 50%, if that argument is omitted\n\n  let color = '#';\n\n  for (let i = 0; i <= 5; i += 2) {\n    // loop through each of the 3 hex pairs—red, green, and blue\n    const v1 = h2d(color1.substr(i, 2)); // extract the current pairs\n    const v2 = h2d(color2.substr(i, 2));\n\n    // combine the current pairs from each source color, according to the specified weight\n    let val = d2h(Math.floor(v2 + (v1 - v2) * (weight / 100.0)));\n\n    while (val.length < 2) {\n      val = `0${val}`;\n    } // prepend a '0' if val results in a single digit\n\n    color += val; // concatenate val to our new color string\n  }\n\n  return color; // PROFIT!\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport {ArchiveButton} from './Button';\nimport {mix} from '../utils/mix';\n\nexport function MaskometerGrid({chosen, words, distribution, onClickSecondWord}) {\n  return (\n    <div className=\"h-full flex flex-col justify-between relative gap-4  \">\n      <p className=\"mx-8 2xl:mb-4 text-lg\">\n        Horizontal position corresponds to usage by the two groups in the selcted corpus of reasons\n        to sign\n      </p>\n      <div className=\"flex-1 \">\n        <div\n          className={classNames(\n            ' h-full px-8 py-4 flex flex-col justify-between relative',\n            'overflow-hidden'\n          )}\n        >\n          <div className=\"z-1 uppercase\">\n            <p\n              className=\"bg-promask text-white text-lg text-center h-full absolute top-0 bottom-0 left-0 rotate-180 p-1 z-10\"\n              style={{writingMode: 'vertical-lr'}}\n            >\n              Promask\n            </p>\n\n            <p\n              className=\"bg-nomask text-white text-lg text-center h-full absolute top-0 bottom-0 right-0 p-1 z-10\"\n              style={{writingMode: 'vertical-rl'}}\n            >\n              Nomask\n            </p>\n\n            <div className=\"absolute top-0 bottom-0 right-1/2 translate-x-1/2 border-r-[1px] boreder-r-white border-dashed opacity-50\" />\n\n            <p className=\"text-lg text-sm 2xl:text-base text-center text-gray select-none absolute top-0 left-0 right-0 w-full normal-case bg-black pb-2\">\n              equally used\n            </p>\n          </div>\n\n          {typeof chosen !== 'undefined' &&\n            chosen.current &&\n            words.nodes.map(({name, deltaNomask}) => {\n              const isCurrent = chosen.next ? chosen.next === name : chosen.current === name;\n\n              let delta = isCurrent\n                ? deltaNomask\n                : distribution.find(({word, secondWord}) => {\n                    if (chosen.next) {\n                      return chosen.next === word && secondWord === name;\n                    }\n                    return chosen.current && word === chosen.current && secondWord === name;\n                  }).nomaskDelta;\n\n              delta = Math.round(delta * 100);\n\n              delta = 3 + ((97 - 3) / 100) * delta;\n\n              return (\n                <div\n                  key={name}\n                  className={classNames(\n                    'w-full flex items-center relative',\n                    'before:absolute before:left-0 before:right-0 ',\n                    'before:border-b-[1px] before:block before:top-1/2 before:transition-all',\n                    'before:w-full transition-[margin,background-color] duration-500',\n                    isCurrent\n                      ? 'before:border-b-gray  opacity-30'\n                      : 'before:border-b-current  before:opacity-20'\n                  )}\n                >\n                  <ArchiveButton\n                    isCurrent={isCurrent}\n                    style={{\n                      marginLeft: `${delta}%`,\n                      '--gradient-mix': isCurrent ? undefined : mix('EA3C9A', '3514FF', delta),\n                    }}\n                    className=\"transition-[margin] duration-1000 -translate-x-1/2 absolute z-20\"\n                    onClick={() => onClickSecondWord(name)}\n                  >\n                    {name}\n                  </ArchiveButton>\n                </div>\n              );\n            })}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, {useEffect, useMemo, useRef, useState} from 'react';\nimport classNames from 'classnames';\nimport Comment from './Comment';\nimport {ArchiveButton} from './Button';\nimport {mix} from '../utils/mix';\nimport {sentencesHaveWord} from '../utils/sentences';\n\nfunction GroupCommentList({comments, chosen, secondWord, origin, limit}) {\n  return (\n    <div>\n      <div key={origin} className=\"grid gap-4\">\n        {comments.map(\n          (c, i) =>\n            i < limit && (\n              <Comment key={c.id} highlightWords word={chosen} secondWord={secondWord} {...c} />\n            )\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default function Comments({comments, chosen, secondWord, onChangeSecondWord, distribution}) {\n  const scroller = useRef();\n\n  const [limit, setLimit] = useState(100);\n\n  useEffect(() => {\n    setLimit(100);\n    scroller.current?.scrollTo(0, 0);\n  }, [chosen, secondWord]);\n\n  const memoized = useMemo(() => {\n    const result = {};\n    for (const origin of ['promask', 'nomask']) {\n      const thisOriginComments = comments.filter(({origin: o}) => origin === o);\n\n      const f = thisOriginComments.filter(\n        ({sentences}) => !secondWord || sentencesHaveWord(sentences, secondWord)\n      );\n\n      result[origin] = {\n        totalCount: thisOriginComments.length,\n        count: f.length,\n        comments: f,\n        percentage: (100 * f.length) / thisOriginComments.length,\n      };\n    }\n    return result;\n  }, [secondWord, chosen, comments]);\n\n  return (\n    <div className=\"px-8 h-full max-h-full flex flex-col\">\n      <p className=\"2xl:mb-4 w-full text-lg\">\n        Here you can read the comments on the 100 most liked promask and nomask petition\n      </p>\n      <div className=\"w-full sticky top-0 bg-black z-20\">\n        <h2 className=\"text-lg text-light my-4\">Filter opinions by:</h2>\n        <div className=\"flex flex-wrap\">\n          {distribution.map(({secondWord: word, nomaskDelta}) => {\n            const isSelected = secondWord === word;\n            const isCurrent = chosen === word;\n\n            return (\n              <ArchiveButton\n                key={word}\n                checkbox\n                isCurrent={isCurrent}\n                className=\"mb-2 mr-2\"\n                isSelected={isSelected}\n                onClick={() => onChangeSecondWord(isSelected ? undefined : word)}\n                style={{\n                  '--gradient-mix': mix('EA3C9A', '3514FF', nomaskDelta * 100),\n                }}\n              >\n                {word}\n              </ArchiveButton>\n            );\n          })}\n        </div>\n      </div>\n      <div className=\"\">\n        <div className=\"flex justify-around md:w-11/12 3xl:w-10/12 mx-auto\">\n          {['promask', 'nomask'].map(origin => {\n            const {percentage, totalCount, count} = memoized[origin];\n            const round = percentage > 1 ? 0 : 1;\n\n            return (\n              <p className=\"sticky top-0 bg-black z-30 text-center text-lg pt-3 pb-4\">\n                {secondWord\n                  ? `${percentage.toFixed(\n                      round\n                    )}% of ${origin} opinions (${count} of ${totalCount})`\n                  : `All ${origin} opinions (${count})`}\n              </p>\n            );\n          })}\n        </div>\n      </div>\n      <div\n        className={classNames('w-full overflow-y-scroll flex-1 pb-8')}\n        id=\"comments-container\"\n        ref={scroller}\n        onScroll={function scrolled(e) {\n          if (\n            e.currentTarget.offsetHeight + e.currentTarget.scrollTop >=\n            e.currentTarget.scrollHeight\n          ) {\n            console.log('Scroll ended');\n            setLimit(l => {\n              if (l <= Math.max(memoized.nomask.comments.length, memoized.promask.comments.length))\n                return l + 200;\n\n              return l;\n            });\n          }\n        }}\n      >\n        <div className=\"grid grid-cols-2 gap-8 justify-around w-full md:w-11/12 3xl:w-10/12 mx-auto \">\n          {chosen &&\n            ['promask', 'nomask'].map(origin => (\n              <GroupCommentList\n                key={origin}\n                origin={origin}\n                chosen={chosen}\n                secondWord={secondWord}\n                limit={limit}\n                {...memoized[origin]}\n              />\n            ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, {useEffect, useMemo, useState} from 'react';\nimport {graphql} from 'gatsby';\nimport classNames from 'classnames';\nimport Layout from '../components/Layout';\nimport WordsIndex from '../components/WordsIndex';\nimport Accordion from '../components/Accordion';\nimport {MaskometerGrid} from '../components/maskometerGrid';\nimport Comments from '../components/Comments';\nimport {sentencesHaveWord} from '../utils/sentences';\nimport allComments from '../unsourced/comments.json';\n\nexport default function Library({data: {words, ...data}}) {\n  const [chosen, setChosen] = useState({});\n  const [secondWord, setSecondWord] = useState();\n  const [showComments, setShowComments] = useState(false);\n\n  const filteredComments = useMemo(\n    () => allComments.filter(({sentences}) => sentencesHaveWord(sentences, chosen.current)),\n    [chosen]\n  );\n\n  useEffect(() => {\n    if (!showComments && secondWord) setShowComments(true);\n  }, [secondWord]);\n\n  useEffect(() => {\n    if (!chosen.next) setSecondWord();\n  }, [chosen]);\n\n  const listOfChosenWords = words.nodes.map(x => x.name);\n\n  const distribution = data.distribution.nodes.filter(\n    i => listOfChosenWords.findIndex(x => x === i.secondWord) !== -1\n  );\n\n  return (\n    <Layout\n      wrapperClassName=\"max-h-screen h-screen flex flex-col\"\n      navClassName=\"!text-black\"\n      className=\"flex-1 min-h-0 \"\n      tutorial\n    >\n      <div className=\"w-full h-full overflow-hidden flex flex-nowrap border-y-white border-t-2 \">\n        <WordsIndex words={words.nodes} chosen={chosen} setChosen={setChosen} />\n        <div\n          className={classNames(\n            ' overflow-hidden flex flex-col',\n            chosen.current ? 'w-10/12' : 'w-0'\n          )}\n        >\n          <Accordion\n            title=\"Related words\"\n            subtitle={\n              <>\n                usage of words mentioned with <span className=\"uppercase\">{chosen.current}</span>\n              </>\n            }\n            isOpen={!showComments}\n            onClick={() => setShowComments(!showComments)}\n          >\n            <MaskometerGrid\n              chosen={chosen}\n              words={words}\n              distribution={distribution}\n              onClickSecondWord={setSecondWord}\n            />\n          </Accordion>\n          <Accordion\n            title=\"Comments\"\n            subtitle={\n              <>\n                containing <span className=\"uppercase\">{chosen.current}</span>{' '}\n                {secondWord && (\n                  <>\n                    and <span className=\"uppercase\">{secondWord}</span>\n                  </>\n                )}{' '}\n              </>\n            }\n            isOpen={showComments}\n            onClick={() => setShowComments(!showComments)}\n          >\n            <Comments\n              comments={filteredComments}\n              distribution={distribution.filter(({word}) => word === chosen.current)}\n              chosen={chosen.current}\n              secondWord={secondWord}\n              onChangeSecondWord={setSecondWord}\n            />\n          </Accordion>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\nexport const query = graphql`\n  query Glossary {\n    words: allSheetsScatter(filter: {scelta: {eq: \"X\"}}, sort: {order: ASC, fields: [name]}) {\n      nodes {\n        name\n        deltaPromask\n        deltaNomask\n        finding\n      }\n    }\n    distribution: allSheetsCopiaDiDistribuzione(sort: {order: ASC, fields: [secondWord]}) {\n      nodes {\n        word\n        secondWord\n        nomaskDelta\n        promaskDelta\n      }\n    }\n  }\n`;\n","import replacer from '../data/replace.json';\n\nexport function matches(part, word) {\n  if (!part) return false;\n\n  if (part.toLowerCase() === word) {\n    return true;\n  }\n\n  if (part.toLocaleString() === replacer[word]) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function sentenceHasWord(sentence, word) {\n  return sentence.findIndex(p => matches(p, word)) !== -1;\n}\n\nexport function sentencesHaveWord(sentences, word) {\n  for (const sentence of sentences) {\n    if (sentenceHasWord(sentence, word)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n"],"names":["HighlightedWord","children","className","isActive","promask","nomask","secondary","classNames","Comment","id","origin","sentences","user","createdAt","word","secondWord","petition","highlightWords","large","lastWasSkipped","map","sentence","i","sentenceHasWord","key","part","isPrimaryWord","matches","isSecondaryWord","href","slug","undefined","title","target","rel","defaultProps","Index","words","chosen","setChosen","current","onClick","index","name","finding","isNextSelected","length","next","role","Accordion","isOpen","subtitle","panelId","replace","toLowerCase","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","onToggle","h2d","h","parseInt","mix","color1","color2","w","weight","color","v1","substr","v2","val","Math","floor","toString","MaskometerGrid","distribution","onClickSecondWord","style","writingMode","nodes","deltaNomask","isCurrent","delta","find","nomaskDelta","round","marginLeft","GroupCommentList","comments","limit","c","Comments","onChangeSecondWord","scroller","useRef","useState","setLimit","useEffect","scrollTo","memoized","useMemo","result","thisOriginComments","filter","o","f","sentencesHaveWord","totalCount","count","percentage","isSelected","checkbox","toFixed","ref","onScroll","e","currentTarget","offsetHeight","scrollTop","scrollHeight","console","log","l","max","Library","data","setSecondWord","showComments","setShowComments","filteredComments","allComments","listOfChosenWords","x","findIndex","Layout","wrapperClassName","navClassName","tutorial","toLocaleString","replacer","p"],"sourceRoot":""}