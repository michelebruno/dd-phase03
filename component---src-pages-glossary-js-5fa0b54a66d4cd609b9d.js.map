{"version":3,"file":"component---src-pages-glossary-js-5fa0b54a66d4cd609b9d.js","mappings":"qNAMe,SAASA,EAAT,GAAkD,IAAD,IAA9BC,KAAOC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,aAC5C,GAA4BC,EAAAA,EAAAA,UAAS,IAA9BC,EAAP,KAAeC,EAAf,KACA,OAAO,gBAAC,IAAD,KAEH,uBAAKC,UAAU,kCACX,uBAAKA,UAAU,8CACX,sBAAIA,UAAU,gFAAd,YAGA,sBAAIA,UAAW,IACVL,EAAMM,MAAMC,KAAI,gBAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,KAAR,OAAkB,sBAC/BC,IAAKF,EACLG,aAAc,kBAAMP,GAChB,SAAAQ,GAAC,MAAK,CAACC,KAAMD,EAAEE,QAASA,QAASN,OAErCO,aAAc,kBAAMX,GAAU,SAAAQ,GAAC,MAAK,CAACE,QAASF,EAAEC,UAChDG,QAAS,kBAAMZ,EAAU,CAACU,QAASN,KACnCH,UAAWY,GAAAA,CAAW,qBAClB,YACA,yCACA,kCACAd,EAAOW,UAAYN,GAAQ,wBAG/B,wBAAMU,KAAMT,EAAMO,QAAS,SAAAG,GACvBA,EAAEC,mBACFZ,SAIhB,uBAAKH,UAAU,2CACX,uBAAKA,UAAU,sDACX,wBAAMA,UAAW,iBAAjB,MACA,wBAAMA,UAAW,kBAAjB,QAEJ,uBACIA,UAAU,aAENL,EAAMM,MAAMC,KAAI,YAAa,IAAXC,EAAU,EAAVA,KACVa,EAAQpB,EAAaK,MAAMgB,MAAK,gBACKC,EADL,EACKA,KACAC,EAFL,EAEKA,WAFL,OAGQrB,EAAOW,QAAUS,IAASpB,EAAOW,QAAUS,GAASA,IAASC,IAAehB,KAH5G,YAOZ,OAFAa,EAAQI,KAAKC,MAAc,IAARL,GAEZ,uBAAKX,IAAKF,EACLH,UAAW,qKACnB,wBACIA,UACIY,GAAAA,CACI,oBACAT,IAASL,EAAOW,QAAU,gDAAkD,mCAC5E,2DAERa,MAAO,CAACC,WAAYP,EAAQ,MAC3Bb","sources":["webpack://phase-03/./src/pages/glossary.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport {graphql, Link} from \"gatsby\";\nimport Layout from \"../components/Layout\";\nimport {Helmet} from \"react-helmet\";\nimport classNames from \"classnames\";\n\nexport default function Glossary({data: {words, distribution}}) {\n    const [chosen, setChosen] = useState({})\n    return <Layout>\n\n        <div className=\"grid grid-cols-5 h-3/4 w-full \">\n            <div className=\"flex flex-col overflow-y-scroll max-h-full\">\n                <h1 className=\"text-light uppercase text-3xl px-8 py-6 border-b-2 border-light sticky top-0\">\n                    Glossary\n                </h1>\n                <ul className={\"\"}>\n                    {words.nodes.map(({name, link}) => <li\n                        key={name}\n                        onMouseEnter={() => setChosen(\n                            c => ({prev: c.current, current: name})\n                        )}\n                        onMouseLeave={() => setChosen(c => ({current: c.prev}))}\n                        onClick={() => setChosen({current: name})}\n                        className={classNames(\"text-4xl uppercase\",\n                            \"px-8 py-6\",\n                            \"border-b-2 border-white cursor-pointer\",\n                            \"hover:bg-light hover:text-black\",\n                            chosen.current === name && \"bg-light text-black\"\n                        )}\n                    >\n                        <span href={link} onClick={e => {\n                            e.preventDefault();\n                        }}>{name}</span>\n                    </li>)}\n                </ul>\n            </div>\n            <div className=\"col-span-4 sticky top-10 flex flex-col \">\n                <div className=\"w-full px-8 flex justify-between uppercase text-xl\">\n                    <span className={\"bg-nomask p-1\"}>No</span>\n                    <span className={\"bg-promask p-1\"}>Pro</span>\n                </div>\n                <div\n                    className=\"uppercase\">\n                    {\n                        words.nodes.map(({name}) => {\n                            let delta = distribution.nodes.find(({\n                                                                     word,\n                                                                     secondWord\n                                                                 }) => (chosen.current ? word === chosen.current : word === word) && secondWord === name)['nomaskDelta']\n\n                            delta = Math.round(delta * 100)\n\n                            return <div key={name}\n                                        className={\"w-full my-1 flex-grow relative before:w-full before:absolute before:left-0 before:right-0 before:border-b-white before:border-b-[1px] before:block before:top-1/2\"}>\n                                <span\n                                    className={\n                                        classNames(\n                                            \"inline-block p-1 \",\n                                            name === chosen.current ? \"bg-black text-light border-[1px] border-light\" : \"bg-white text-black text-center \",\n                                            \"-translate-x-1/2 transition-all duration-1000 delay-200\"\n                                        )}\n                                    style={{marginLeft: delta + \"%\"}}>\n                                    {name}\n                                </span>\n                            </div>\n                        })\n                    }\n                </div>\n            </div>\n        </div>\n    </Layout>\n}\n\nexport const query = graphql`query Glossary {\n    words: allSheetsScatter(limit: 20){\n        nodes{\n            name\n            link : gatsbyPath(filePath: \"/glossary/{SheetsScatter.name}\")\n        }\n    }\n    distribution: allSheetsDistribuzione {\n        nodes {\n            word\n            secondWord\n            nomaskDelta\n            promaskDelta\n        }\n    }\n}`\n"],"names":["Glossary","data","words","distribution","useState","chosen","setChosen","className","nodes","map","name","link","key","onMouseEnter","c","prev","current","onMouseLeave","onClick","classNames","href","e","preventDefault","delta","find","word","secondWord","Math","round","style","marginLeft"],"sourceRoot":""}