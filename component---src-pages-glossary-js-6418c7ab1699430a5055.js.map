{"version":3,"file":"component---src-pages-glossary-js-6418c7ab1699430a5055.js","mappings":"iMAGO,SAASA,EAAT,GAAmF,IAAzDC,EAAwD,EAAxDA,SAAUC,EAA8C,EAA9CA,UAAWC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,OAAgB,EAARC,MAC7E,OAAO,wBACHJ,UAAWK,GAAAA,CACP,mBACA,wBACA,kCACA,gCACA,gEACA,+BACCH,IAAYC,GAAU,kBACvBD,GAAW,oBACXC,GAAU,oBACTF,GAAY,mBACbD,IAGHD,GAIM,SAASO,EAAT,GAgBqB,IAfAC,EAeD,EAfCA,GACAP,EAcD,EAdCA,UACAD,EAaD,EAbCA,SACAS,EAYD,EAZCA,OACAC,EAWD,EAXCA,aAEAC,GASD,EAVCC,MAUD,EATCD,QACAE,EAQD,EARCA,KACAC,EAOD,EAPCA,SACAC,EAMD,EANCA,KACAC,EAKD,EALCA,WACAC,EAID,EAJCA,SACAC,EAGD,EAHCA,cACAC,EAED,EAFCA,eACAC,EACD,EADCA,MAIhC,OAAIJ,IAA6D,IAA/CC,EAASI,WAAU,SAAAC,GAAC,OAAIA,IAAMN,KACrC,KAEJ,uBACHR,GAAIA,EACJP,UAAWK,GAAAA,CACPL,EACA,gEACAmB,EAAQ,kBAAoB,4BACjB,YAAXX,GAAwB,iBACb,WAAXA,GAAuB,kBAE3B,uBAAKR,UAAU,WACX,uBAAKA,UAAW,4BAA8BQ,EAAQc,MAAO,CAACC,YAAa,QAE/E,uBAAKvB,UAAW,WACZ,uBAAKA,UAAW,mBAAqBmB,EAAQ,WAAa,cACtD,4BAAOT,GACN,MACD,4BAAOG,GAAYD,IAEvB,qBAAGZ,UAAY,iBAAkBmB,EAAQ,6BAA+B,UAC/C,IAAbH,EAA2BA,EAASQ,KAAI,SAACC,EAAMC,GACnD,OAAID,EAAKE,gBAAkBb,GAAQW,EAAKE,gBAAkBZ,EAAmB,gBAACjB,EAAD,CACzE8B,IAAKF,EAAGzB,SAAUiB,EAAgBhB,QAAoB,YAAXM,EAAsBL,OAAmB,WAAXK,GACxEiB,GAGDA,IAASV,EAAmB,wBAAMa,IAAKF,EAAG1B,UAC1C,yBACDyB,GAEIA,KACN1B,GAET,qBAAGC,UAAW,mBAAqBmB,EAAQ,WAAa,cACpD,qBAAGU,KAAMpB,EAAcT,UAAW,YAAa8B,OAAQ,UAAWb,MASlFX,EAAQyB,aAAe,CACnBb,gBAAgB,I,ssBClFpB,SAASc,EAAT,GAA6B,IAAZjC,EAAW,EAAXA,SACb,OAAO,uBAAKC,UAAW,0DAClBD,GAKT,SAASkC,EAAT,GAAkE,IAAzCC,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,SAClD,GAAgCC,EAAAA,EAAAA,WAAS,GAAlCC,EAAP,KAAiBC,EAAjB,KAEA,GAAoCF,EAAAA,EAAAA,YAA7BvB,EAAP,KAAmB0B,EAAnB,KAQA,OANAC,EAAAA,EAAAA,YAAU,WACFH,GACAE,MAEL,CAACF,IAEG,uBAAKvC,UAAU,qEAClB,uBAAKA,UAAU,UACX,uBACIA,UAAWK,GAAAA,CAAW,gDAAiDkC,EAAW,oBAAsB,oBACxG,uBAAKvC,UAAW,0BAGRmC,EAAMQ,MAAMnB,KAAI,YAA2B,IAAzBoB,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,aAChBC,EAAQV,EAAaO,MAAMI,MAAK,YAGQ,IAFHjC,EAEE,EAFFA,KACAC,EACE,EADFA,WAGrC,OAAImB,EAAOc,KACAd,EAAOc,OAASlC,GAAQC,IAAe6B,GAE1CV,EAAOe,QAAUnC,IAASoB,EAAOe,QAAUnC,GAASA,IAASC,IAAe6B,KAR5E,aAWRM,EAAYN,IAASV,EAAOe,QAC5BE,EAAaP,IAAS7B,EAQ1B,OAPImC,IACAJ,EAAQD,GAGZC,EAAQM,KAAKC,MAAc,IAARP,GAGZ,uBAAKlB,IAAKgB,EACL5C,UACIK,GAAAA,CACI,mBACA,oDACA,0EACAkC,EAAW,aAAe,gBAC1BW,EAAY,wBAA0B,0BAGtD,0BACII,UAAWf,GAAYW,EACvBK,QAAS,kBAAMd,EAAcU,OAAaK,EAAYZ,IACtD5C,UACIK,GAAAA,CACI,oEACA,8CACAkC,EAAW,eAAiB,kCAC3BW,IAAcC,IACdZ,EAAW,sDAAwD,uBACpEW,GAAa,mCACbC,GAAc,oCAEtB7B,MAAO,CACHmC,WAAalB,OAAyBiB,EAAdV,EAAQ,MAGnCF,QAMrB,uBACI5C,UAAWK,GAAAA,CAAW,sGAAuGkC,GAAY,kBACzIhC,GAAI,sBACJ,uBAAKP,UAAU,yCACV,CAAC,UAAW,UAAUwB,KAAI,SAAAhB,GAAM,OAC7B,uBAAKR,UAAW,8BACXqC,EACIqB,QAAO,gBAAUC,EAAV,EAAEnD,OAAF,OAAiBA,IAAWmD,KACnCnC,KACG,SAACoC,GAAD,OAAO,gBAAC,IAAD,eAAShC,IAAKgC,EAAErD,GACPW,gBAAgB,EAChBJ,KAAMoB,EAAOe,QACblC,WAAYA,GAAgB6C,eAS5E,uBAAK5D,UAAW,wBACZ,0BAAQA,WAAYuC,GAAY,SAAUgB,QAAS,kBAAMf,GAAY,KAArE,eAGA,0BAAQxC,UAAWuC,GAAY,SAAUgB,QAAS,kBAAMf,GAAY,KAApE,sBAQG,SAASqB,EAAT,GAA+D,IAAD,IAA3CC,KAAO3B,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,aAAc2B,EAAe,EAAfA,YAC1D,GAA4BzB,EAAAA,EAAAA,UAAS,IAA9BJ,EAAP,KAAe8B,EAAf,KAGA,OAAO,gBAAC,IAAD,CAAQC,iBAAkB,uCAClBjE,UAAW,mBACtB,uBAAKA,UAAU,4CACX,uBAAKA,UAAU,wDACX,gBAACgC,EAAD,wBACA,0BACKG,EAAMQ,MACFe,QAAO,SAAAhC,GAAC,MAAiB,MAAbA,EAAEwC,UACd1C,KAAI,gBAAEoB,EAAF,EAAEA,KAAMuB,EAAR,EAAQA,KAAR,OAAkB,sBACnBvC,IAAKgB,EACLwB,aAAc,kBAAMJ,GAChB,SAAAJ,GAAC,MAAK,CAACX,QAASW,EAAEX,QAASD,KAAMJ,OAErCyB,aAAc,kBAAML,GAAU,SAAAJ,GAAC,cAASA,GAAT,IAAYZ,UAAMQ,QACjDD,QAAS,kBAAMS,EAAU,CAACf,QAASL,KACnC5C,UAAWK,GAAAA,CAAW,qBAClB,YACA,yCACA,kCACA6B,EAAOe,UAAYL,GAAQ,wBAGnC,wBAAMf,KAAMsC,EAAMZ,QAAS,SAAAe,GACvBA,EAAEC,mBACF3B,SAIhB,gBAACX,EAAD,CAAgBC,OAAQA,EAAQC,MAAOA,EAAOC,aAAcA,EAC5CC,SAAU0B,EAAYpB,MAAMe,QAAO,qBAAE5C,OAAmBoB,EAAOe","sources":["webpack://phase-03/./src/components/Comment.js","webpack://phase-03/./src/pages/glossary.js"],"sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\n\nexport function HighlightedWord({children, className, isActive, promask, nomask, black}) {\n    return <span\n        className={classNames(\n            'highlighted-word',\n            \"relative inline-block\",\n            \"transition-colors duration-1000\",\n            \"before:z-[-1] before:absolute\",\n            \"before:transition-all before:duration-1000 before:origin-left\",\n            \"before:h-full before:w-full\",\n            !promask && !nomask && 'before:bg-light',\n            promask && 'before:bg-promask',\n            nomask && 'before:bg-nomask',\n            !isActive && 'before:scale-x-0',\n            className\n        )}\n    >\n        {children}\n    </span>\n}\n\nexport default function Comment({\n                                    id,\n                                    className,\n                                    children,\n                                    origin,\n                                    petitionLink,\n                                    likes,\n                                    author,\n                                    date,\n                                    dateText,\n                                    word,\n                                    secondWord,\n                                    splitted,\n                                    petitionTitle,\n                                    highlightWords,\n                                    large\n                                }) {\n\n\n    if (secondWord && splitted.findIndex(s => s === secondWord) === -1)\n        return null;\n\n    return <div\n        id={id}\n        className={classNames(\n            className,\n            \"comment flex w-full bg-white text-black boreder-2 normal-case\",\n            large ? 'p-8 rounded-3xl' : 'p-4 rounded-xl text-base ',\n            origin === 'promask' && 'border-promask',\n            origin === 'nomask' && 'border-nomask'\n        )}>\n        <div className=\"w-2/12 \">\n            <div className={\"mr-[25%] rounded-full bg-\" + origin} style={{aspectRatio: '1'}}/>\n        </div>\n        <div className={\"w-10/12\"}>\n            <div className={\"text-[#A2A2A2] \" + (large ? 'text-3xl' : 'text-base')}>\n                <span>{author}</span>\n                {' â€¢ '}\n                <span>{dateText || date}</span>\n            </div>\n            <p className={ 'comment-text '+ (large ? 'text-6xl leading-snug py-4' : '')}>\n                {typeof splitted !== 'undefined' ? splitted.map((part, i) => {\n                    if (part.toLowerCase() === word || part.toLowerCase() === secondWord) return <HighlightedWord\n                        key={i} isActive={highlightWords} promask={origin === 'promask'} nomask={origin === 'nomask'}>\n                        {part}\n                    </HighlightedWord>\n\n                    if (part === secondWord) return <span key={i} className={\n                        'border-light border-2'\n                    }>{part}</span>\n\n                    return part\n                }) : children}\n            </p>\n            <p className={\"text-[#A2A2A2] \" + (large ? 'text-2xl' : 'text-base')}>\n                <a href={petitionLink} className={\"underline\"} target={'_blank'}>{petitionTitle}</a>\n            </p>\n        </div>\n\n    </div>\n\n}\n\n\nComment.defaultProps = {\n    highlightWords: true\n}","import React, {useEffect, useState} from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/Layout\";\nimport classNames from \"classnames\";\nimport Comment from \"../components/Comment\";\n\nfunction Header({children}) {\n    return <div className={\"px-8 py-2 text-xl uppercase border-white border-[1px] \"}>\n        {children}\n    </div>\n}\n\n\nfunction MaskometerGrid({chosen, words, distribution, comments}) {\n    const [collapse, setCollapse] = useState(false)\n\n    const [secondWord, setSecondWord] = useState()\n\n    useEffect(() => {\n        if (collapse) {\n            setSecondWord()\n        }\n    }, [collapse])\n\n    return <div className=\"col-span-10 min-h-0 flex flex-col justify-between relative gap-4 \">\n        <div className=\"flex-1\">\n            <div\n                className={classNames(\"h-full flex flex-col justify-between relative\", collapse ? 'overflow-y-scroll' : 'overflow-hidden')}>\n                <div className={\"sticky top-0 uppercase\"}>\n\n                    {\n                        words.nodes.map(({name, deltaPromask}) => {\n                            let delta = distribution.nodes.find(({\n                                                                     word,\n                                                                     secondWord\n                                                                 }) => {\n\n                                if (chosen.next) {\n                                    return chosen.next === word && secondWord === name\n                                }\n                                return (chosen.current ? word === chosen.current : word === word) && secondWord === name\n                            })['promaskDelta']\n\n                            let isCurrent = name === chosen.current\n                            let isSelected = name === secondWord\n                            if (isCurrent) {\n                                delta = deltaPromask\n                            }\n\n                            delta = Math.round(delta * 100)\n\n\n                            return <div key={name}\n                                        className={\n                                            classNames(\n                                                \"w-full relative \",\n                                                \"before:absolute before:left-0 before:right-0 my-1\",\n                                                \"before:border-b-[1px] before:block before:top-1/2 before:transition-all\",\n                                                collapse ? \"before:w-0\" : \"before:w-full\",\n                                                isCurrent ? 'before:border-b-light' : 'before:border-b-white'\n                                            )\n                                        }>\n                                <button\n                                    disabled={!collapse || isCurrent}\n                                    onClick={() => setSecondWord(isSelected ? undefined : name)}\n                                    className={\n                                        classNames(\n                                            \"inline-block py-1 px-3 text-lg border-[1px] uppercase text-center\",\n                                            \"transition-[margin] duration-1000 delay-200\",\n                                            collapse ? 'rounded-full' : 'rounded-[0px] -translate-x-1/2',\n                                            !isCurrent && !isSelected &&\n                                            (collapse ? 'bg-black text-white hover:text-black hover:bg-white' : 'text-white bg-black'),\n                                            isCurrent && \"bg-black text-light border-light\",\n                                            isSelected && \"bg-white text-black border-white\"\n                                        )}\n                                    style={{\n                                        marginLeft: !collapse ? delta + \"%\" : undefined,\n                                        // backgroundColor: mix('6147FF', 'CFFF58', delta)\n                                    }}>\n                                    {name}\n                                </button>\n                            </div>\n                        })\n                    }\n                </div>\n                <div\n                    className={classNames(\"absolute transition-transform top-0 bottom-0 right-0 w-9/12 translate-y-full delay-600 duration-500\", collapse && 'transform-none')}\n                    id={\"comments-container\"}>\n                    <div className=\"grid grid-cols-2 gap-8 justify-around\">\n                        {['promask', 'nomask'].map(origin =>\n                            <div className={\"flex flex-col gap-8 pb-64 \"}>\n                                {comments\n                                    .filter(({origin: o}) => origin === o)\n                                    .map(\n                                        (c) => <Comment key={c.id}\n                                                        highlightWords={true}\n                                                        word={chosen.current}\n                                                        secondWord={secondWord} {...c} />\n                                    )}\n\n                            </div>)}\n                    </div>\n                </div>\n            </div>\n\n        </div>\n        <div className={\"flex sticky bottom-0\"}>\n            <button className={!collapse && 'hidden'} onClick={() => setCollapse(false)}>\n                - Relations\n            </button>\n            <button className={collapse && 'hidden'} onClick={() => setCollapse(true)}>\n                Read comments ->\n            </button>\n        </div>\n    </div>\n}\n\n\nexport default function Glossary({data: {words, distribution, allComments}}) {\n    const [chosen, setChosen] = useState({})\n\n\n    return <Layout wrapperClassName={\"max-h-screen h-screen flex flex-col \"}\n                   className={\"flex-1 min-h-0 \"}>\n        <div className=\"grid grid-cols-12 h-full overflow-hidden\">\n            <div className=\"col-span-2 overflow-y-scroll border-r-2 border-white\">\n                <Header>Most used words</Header>\n                <ul>\n                    {words.nodes\n                        .filter(i => i.scelta === 'x')\n                        .map(({name, link}) => <li\n                            key={name}\n                            onMouseEnter={() => setChosen(\n                                c => ({current: c.current, next: name})\n                            )}\n                            onMouseLeave={() => setChosen(c => ({...c, next: undefined}))}\n                            onClick={() => setChosen({current: name})}\n                            className={classNames(\"text-2xl uppercase\",\n                                \"px-8 py-8\",\n                                \"border-b-2 border-white cursor-pointer\",\n                                \"hover:bg-light hover:text-black\",\n                                chosen.current === name && \"bg-light text-black\"\n                            )}\n                        >\n                        <span href={link} onClick={e => {\n                            e.preventDefault();\n                        }}>{name}</span>\n                        </li>)}\n                </ul>\n            </div>\n            <MaskometerGrid chosen={chosen} words={words} distribution={distribution}\n                            comments={allComments.nodes.filter(({word}) => word === chosen.current)}/>\n        </div>\n    </Layout>\n}\n\nexport const query = graphql`query Glossary {\n    words: allSheetsScatter(limit: 20){\n        nodes{\n            name\n            scelta\n            deltaPromask\n        }\n    }\n    distribution: allSheetsDistribuzioneV2 {\n        nodes {\n            word\n            secondWord\n            nomaskDelta\n            promaskDelta\n        }\n    }\n    allComments: allSheetsEstratti(filter: {scelto: {eq: \"x\"}}) {\n        nodes {\n            ...CommentFragment\n        }\n    }\n}`\n"],"names":["HighlightedWord","children","className","isActive","promask","nomask","black","classNames","Comment","id","origin","petitionLink","author","likes","date","dateText","word","secondWord","splitted","petitionTitle","highlightWords","large","findIndex","s","style","aspectRatio","map","part","i","toLowerCase","key","href","target","defaultProps","Header","MaskometerGrid","chosen","words","distribution","comments","useState","collapse","setCollapse","setSecondWord","useEffect","nodes","name","deltaPromask","delta","find","next","current","isCurrent","isSelected","Math","round","disabled","onClick","undefined","marginLeft","filter","o","c","Glossary","data","allComments","setChosen","wrapperClassName","scelta","link","onMouseEnter","onMouseLeave","e","preventDefault"],"sourceRoot":""}