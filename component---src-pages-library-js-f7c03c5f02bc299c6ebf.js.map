{"version":3,"file":"component---src-pages-library-js-f7c03c5f02bc299c6ebf.js","mappings":"2MAIO,SAASA,EAAT,GAAuF,IAA7DC,EAA4D,EAA5DA,SAAUC,EAAkD,EAAlDA,UAAWC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,UAC7E,OAAO,wBACHJ,UAAWK,GAAAA,CACP,oBACCH,IAAYC,GAAU,kBACvBC,EACI,CACIH,GAAY,mBAEhB,CACIC,GAAW,oBACXC,GAAU,mBACVF,IAAaE,GAAUD,IAAY,eAG1CD,GAAY,mBACbD,IAGHD,GAIM,SAASO,EAAT,GAcqB,IAbAC,EAaD,EAbCA,GACAP,EAYD,EAZCA,UACAD,EAWD,EAXCA,SACAS,EAUD,EAVCA,OACAC,EASD,EATCA,UACAC,EAQD,EARCA,KACAC,EAOD,EAPCA,UACAC,EAMD,EANCA,KACAC,EAKD,EALCA,WACAC,EAID,EAJCA,SACAC,EAGD,EAHCA,SACAC,EAED,EAFCA,eACAC,EACD,EADCA,MAE5BC,GAAiB,EAErB,GAA8BC,EAAAA,EAAAA,YAA9B,UAEA,OAAO,uBACHZ,GAAIA,EACJP,UAAWK,GAAAA,CACPL,EACA,UACAiB,GAAS,QACE,YAAXT,GAAwB,iBACb,WAAXA,GAAuB,kBAE3B,uBAAKR,UAAU,KACX,uBAAKA,UAAW,0BAA4BQ,KAEhD,uBAAKR,UAAW,eACZ,uBAAKA,UAAW,0BAA4BiB,EAAQ,WAAa,YAC7D,mCAAWP,GACV,MACD,4BAAOK,GAAYJ,IAEvB,qBAAGX,UAAW,iBAAmBiB,EAAQ,6BAA+B,wBAC9C,IAAdR,EAA4BA,EAAUW,KAAI,SAACC,EAAUC,GAGzD,OAAIC,EAAAA,EAAAA,IAAgBF,EAAUT,KAASW,EAAAA,EAAAA,IAAgBF,EAAUR,IAC7DK,GAAiB,EACV,gBAAC,WAAD,CAAgBM,IAAKF,GACxBD,EAASD,KAAI,SAACK,EAAMH,GAChB,IAAMI,GAAgBC,EAAAA,EAAAA,IAAQF,EAAMb,GAC9BgB,GAAkBD,EAAAA,EAAAA,IAAQF,EAAMZ,GAEtC,OAAIa,GAAiBE,EAAwB,gBAAC,WAAD,CACzCJ,IAAKF,GAAI,IACT,gBAACxB,EAAD,CACIG,SAAUe,EAAgBd,QAAoB,YAAXM,EACnCL,OAAmB,WAAXK,EAAqBJ,WAAYwB,GACxCH,IAILA,IAASZ,EAAmB,wBAAMW,IAAKF,EAAGtB,UAC1C,yBACDyB,GAEIA,KAEb,MAIDP,OAAL,GACIA,GAAiB,EACV,aAIVnB,GAET,qBAAG8B,KAAMf,EAASgB,KAAO,4BAA8BhB,EAASgB,UAAOC,EAAWC,MAAOlB,EAASkB,MAC/FhC,UAAWK,GAAAA,CAAW,6BAClBS,EAASgB,KAAO,qCAAuC,iBACvDb,EAAQ,WAAa,WACzBgB,OAAQ,UACNnB,EAASkB,OAAS,oBASnC1B,EAAQ4B,aAAe,CACnBlB,gBAAgB,I,uHClHL,SAASmB,EAAT,GAA4C,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,UAE1C,OAAO,uBAAKtC,UAAWK,GAAAA,CACnB,6BACAgC,EAAOE,QAAU,6CAA+C,YAEhE,uBACIvC,UAAW,0HAA4HqC,EAAOE,SAAW,yBACzJC,QAAS,kBAAMF,EAAU,MAEzB,sBACItC,UACIK,GAAAA,CAAW,qCAFnB,SAOA,wBACIL,UAAWK,GAAAA,CAAW,2CAA4CgC,EAAOE,QAAU,SAAW,KAC1F,wBAAMvC,UAAU,yCAAhB,mDAOZ,sBAAIA,UAAU,oDACToC,EACIhB,KAAI,WAAkBqB,GAAW,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,QACLC,EAAiBH,EAAQ,EAAIL,EAAMS,SAAUT,EAAMK,EAAQ,GAAGC,OAASL,EAAOS,MAAQV,EAAMK,EAAQ,GAAGC,OAASL,EAAOE,SAK3H,OAHIK,GACAG,QAAQC,MAEL,sBACHxB,IAAKkB,EACLF,QAAS,kBAAMH,EAAOE,UAAYG,EAAOJ,EAAU,CAACC,QAASG,IAASJ,EAAU,KAChFtC,UAAWK,GAAAA,CACP,mCACCuC,GAAkB,kBACnBP,EAAOE,UAAYG,EAAO,SAAW,KAGzC,sBAAI1C,UAAWK,GAAAA,CACX,sBAECqC,GAEHL,EAAOE,UAAYG,GAAQC,GAAY,qBAAG3C,UAAW,qEAClD2C,SCjDd,SAASM,EAAT,GAAkE,IAA9CT,EAA6C,EAA7CA,QAASU,EAAoC,EAApCA,OAAQnD,EAA4B,EAA5BA,SAAUiC,EAAkB,EAAlBA,MAAOmB,EAAW,EAAXA,SAGjE,OAAO,uBAAKnD,UAAW,gEAAkEkD,EAAS,SAAU,KACxG,uBACIlD,UAAW,6GACXwC,QAASA,GAET,uBAAKxC,UAAW,sBACZ,sBACIA,UAAW,mCAEVgC,GAEL,wBACIhC,UAAWK,GAAAA,CAAW,wCAAyC6C,EAAS,GAAK,sDADjF,KAEOC,IAKX,2BACI,uBAAKC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BAC7D,wBAAMC,EAAE,kBAAkBC,OAAO,eAAeC,YAAY,OAC3DT,GAAU,wBAAMO,EAAE,6BAA6BC,OAAO,eAAeC,YAAY,SAM/F,uBAAK3D,UAAWK,GAAAA,CACZ,GACA6C,EAAS,SAAW,wBAEnBnD,IAObkD,EAAUf,aAAe,CACrB0B,SAAU,c,cC1Cd,SAASC,EAAIC,GACT,OAAOC,SAASD,EAAG,IAIhB,SAASE,EAAIC,EAASC,EAASC,GAClCA,OAA8B,IAAZA,EAA2BA,EAAS,GAItD,IAFA,IAAIC,EAAQ,IAEH9C,EAAI,EAAGA,GAAK,EAAGA,GAAK,EAAG,CAO5B,IANA,IAAI+C,EAAKR,EAAII,EAAQK,OAAOhD,EAAG,IAC3BiD,EAAKV,EAAIK,EAAQI,OAAOhD,EAAG,IAG3BkD,EAAUC,KAAKC,MAAMH,EAAkBJ,EAAS,KAArBE,EAAKE,IAjB/BI,SAAS,IAmBPH,EAAI3B,OAAS,GAChB2B,EAAM,IAAMA,EAGhBJ,GAASI,EAGb,OAAOJ,ECrBJ,SAASQ,EAAT,GAA2E,IAAlDvC,EAAiD,EAAjDA,OAAQD,EAAyC,EAAzCA,MAAOyC,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,kBAGzD,OAAO,uBAAK9E,UAAU,yDAClB,qBAAGA,UAAW,qBAAd,uGAGA,uBAAKA,UAAU,WACX,uBACIA,UAAWK,GAAAA,CAAW,2DAA4D,oBAClF,uBAAKL,UAAW,iBAEZ,qBAAGA,UAAU,sGACV+E,MAAO,CAACC,YAAa,gBADxB,WAKA,qBAAGhF,UAAU,2FACV+E,MAAO,CAACC,YAAa,gBADxB,UAKA,uBACIhF,UAAU,8GAEd,qBAAGA,UAAU,kIAAb,sBAOgB,IAAXqC,GAA0BA,EAAOE,SAC1CH,EAAM6C,MAAM7D,KAAI,YAA0B,IAAxBsB,EAAuB,EAAvBA,KAAMwC,EAAiB,EAAjBA,YAEhBC,EAAY9C,EAAOS,KAAOT,EAAOS,OAASJ,EAAOL,EAAOE,UAAYG,EAExEyC,GAAapC,QAAQC,IAAIN,EAAMwC,GAE/B,IAAIE,EACAD,EACID,EACAL,EACKQ,MAAK,YAGQ,IAFHzE,EAEE,EAFFA,KACAC,EACE,EADFA,WAGP,OAAIwB,EAAOS,KACAT,EAAOS,OAASlC,GAAQC,IAAe6B,EAE1CL,EAAOE,SAAW3B,IAASyB,EAAOE,SAAY1B,IAAe6B,KAT7E,YAiBR,OAHA0C,EAAQ,EAAK,KAFbA,EAAQX,KAAKa,MAAc,IAARF,IAKZ,uBAAK5D,IAAKkB,EACL1C,UACIK,GAAAA,CACI,oCACA,gDACA,0EACA,kEACA8E,EAAY,mCAAqC,+CAGjE,gBAAC,IAAD,CACIA,UAAWA,EACXJ,MAAO,CACHQ,WAAYH,EAAQ,IACpB,iBAAkBD,OAAYpD,EAAYiC,EAAI,SAAU,SAAUoB,IAEtEpF,UAAW,iFACXwC,QAAS,kBAAMsC,EAAkBpC,KAEhCA,U,wBC5E7B,SAAS8C,EAAT,GAAmE,IAAxCC,EAAuC,EAAvCA,SAAUpD,EAA6B,EAA7BA,OAAQxB,EAAqB,EAArBA,WAAYL,EAAS,EAATA,OAErD,GAA0BW,EAAAA,EAAAA,UAAS,KAA5BuE,EAAP,KAAcC,EAAd,KAGA,GAA0CC,EAAAA,EAAAA,UAAQ,WAC9C,IAAIC,EAAqBJ,EACpBK,QAAO,gBAAUC,EAAV,EAAEvF,OAAF,OAAiBA,IAAWuF,KAClCC,EAAmBH,EACpBC,QAAO,YAAkB,IAAhBrF,EAAe,EAAfA,UACN,OAAQI,IAAcoF,EAAAA,EAAAA,IAAkBxF,EAAWI,MAI3D,MAAO,CACHqF,cAAeL,EAAmBhD,OAClCmD,iBAAAA,KAEL,CAACnF,EAAYL,EAAQ6B,EAAQoD,IAbzBO,EAAP,EAAOA,iBAAkBE,EAAzB,EAAyBA,eAgBzBC,EAAAA,EAAAA,YAAU,WAENR,EAAS,KAET,IAAMpF,EAAK6F,aAEX,WAEI,GAAIV,EAAQM,EAAiBnD,OACzB,OAAOwD,cAAc9F,GAGzBoF,GAAS,SAAAW,GACL,OAAOA,GAAKN,EAAiBnD,OAASyD,EAAI,IAAMA,OAT5B,KAc5B,OAAO,kBAAMD,cAAc9F,MAE5B,CAAC8B,IAEJ,IAAIkE,EAAQ,IAAMP,EAAiBnD,OAASqD,EAExCZ,EAAQiB,EAAO,EAAI,EAAI,EAK3B,OAHAxD,QAAQC,IAAI,YAAa0C,GAGlB,2BACH,qBAAG1F,UAAU,4DAELa,EACO0F,EAAKC,QAAQlB,GADV,QACwB9E,EADxB,cAC4CwF,EAAiBnD,OAD7D,OAC0EqD,EAD1E,WAEC1F,EAFD,cAEqBwF,EAAiBnD,OAFtC,KAMlB,uBAAKrB,IAAKhB,EAAQR,UAAW,qBAA7B,IAAoDgG,EAC/C5E,KACG,SAACqF,EAAGnF,GAAJ,OAAUA,EAAIoE,GAAS,gBAACpF,EAAA,EAAD,eAASkB,IAAKiF,EAAElG,GACPS,gBAAgB,EAChBJ,KAAMyB,EACNxB,WAAYA,GAAgB4F,SAO7D,SAASC,EAAT,GAAqF,IAAlEjB,EAAiE,EAAjEA,SAAUpD,EAAuD,EAAvDA,OAAQxB,EAA+C,EAA/CA,WAAY8F,EAAmC,EAAnCA,mBAAoB9B,EAAe,EAAfA,aAE1E+B,GAAWC,EAAAA,EAAAA,UAOjB,OALAV,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACZ,UAAAS,EAASrE,eAAT,SAAkBuE,SAAS,EAAG,KAC/B,CAACzE,EAAQxB,IAGL,uBAAKb,UAAW,+BACnB,qBAAGA,UAAU,uBAAb,0FAEA,uBAAKA,UAAU,+BAEX,uBAAKA,UAAW,qCACZ,sBAAIA,UAAW,2BAAf,uBACA,uBAAKA,UAAU,kBACV6E,EAAazD,KAAI,YAAsC,IAAxBR,EAAuB,EAAnCC,WAAkBkG,EAAiB,EAAjBA,YAC5BC,EAAanG,IAAeD,EAC5BuE,EAAY9C,IAAWzB,EAE7B,OAAO,gBAAC,IAAD,CACHY,IAAKZ,EACLqG,UAAQ,EACR9B,UAAWA,EACXnF,UAAW,YACXgH,WAAYA,EACZxE,QAAS,kBAAMmE,EAAmBK,OAAajF,EAAYnB,IAC3DmE,MAAO,CACH,iBAAkBf,EAAI,SAAU,SAAwB,IAAd+C,KAG7CnG,QAKjB,uBACIZ,UAAWK,GAAAA,CAAW,uFACtBE,GAAI,qBAAsB2G,IAAKN,GAC/B,uBAAK5G,UAAU,0CACV,CAAC,UAAW,UAAUoB,KAAI,SAAAZ,GAAM,OAAI,gBAACgF,EAAD,CAAkBhE,IAAKhB,EAAQA,OAAQA,EACrBiF,SAAUA,EACVpD,OAAQA,EAAQxB,WAAYA,W,s4z4TC/GxF,SAASsG,EAAT,GAA4C,IAAD,IAAzBC,KAAOhF,EAAkB,EAAlBA,MAAUgF,GAAQ,YACtD,GAA4BjG,EAAAA,EAAAA,UAAS,IAA9BkB,EAAP,KAAeC,EAAf,KACA,GAAoCnB,EAAAA,EAAAA,YAA7BN,EAAP,KAAmBwG,EAAnB,KACA,GAAwClG,EAAAA,EAAAA,WAAS,GAA1CmG,EAAP,KAAqBC,EAArB,KAEMvB,GAAmBJ,EAAAA,EAAAA,UAAQ,kBAAM4B,EAAAA,QACvB,YAAkB,IAAhB/G,EAAe,EAAfA,UACN,OAAOwF,EAAAA,EAAAA,IAAkBxF,EAAW4B,EAAOE,cAEnD,CAACF,KAEL8D,EAAAA,EAAAA,YAAU,YACLmB,GAAgBzG,GAAc0G,GAAgB,KAChD,CAAC1G,KAEJsF,EAAAA,EAAAA,YAAU,YACL9D,EAAOS,MAAQuE,MACjB,CAAChF,IAEJ,IAAMoF,EAAoBrF,EAAM6C,MAAM7D,KAAI,SAAAsG,GAAC,OAAIA,EAAEhF,QAE3CmC,EAAeuC,EAChBvC,aACAI,MACAa,QAAO,SAAAxE,GACJ,OAAiE,IAA1DmG,EAAkBE,WAAU,SAAAD,GAAC,OAAIA,IAAMpG,EAAET,iBAIxD,OAAO,gBAAC+G,EAAA,EAAD,CAAQC,iBAAkB,sCAClBC,aAAc,cACd9H,UAAW,kBACX+H,UAAQ,GACnB,uBAAK/H,UAAU,6EACX,gBAAC,EAAD,CAAYoC,MAAOA,EAAM6C,MAAO5C,OAAQA,EAAQC,UAAWA,IAC3D,uBAAKtC,UAAWK,GAAAA,CACZ,iCACAgC,EAAOE,QAAU,UAAY,QAE7B,gBAACU,EAAD,CAAWjB,MAAO,gBAAiBmB,SAAU,iEAAgC,wBACzEnD,UAAU,aAAaqC,EAAOE,UACvBW,QAASoE,EAAc9E,QAAS,kBAAM+E,GAAiBD,KAC9D,gBAAC1C,EAAD,CAAgBvC,OAAQA,EAAQD,MAAOA,EAAOyC,aAAcA,EAC5CC,kBAAmBuC,KAEvC,gBAACpE,EAAD,CAAWjB,MAAO,WACPmB,SAAU,8CAAa,wBACnBnD,UAAU,aAAaqC,EAAOE,SADxB,IACyC1B,GAAc,uCAAM,wBACnEb,UAAU,aAAaa,IAFjB,MAGVqC,OAAQoE,EAAc9E,QAAS,kBAAM+E,GAAiBD,KAC7D,gBAACZ,EAAD,CACIjB,SAAUO,EACVnB,aAAcA,EAAaiB,QAAO,qBAAElF,OAAmByB,EAAOE,WAC9DF,OAAQA,EAAOE,QACf1B,WAAYA,EACZ8F,mBAAoBU,U,6mEC9DrC,SAAS1F,EAAQF,EAAMb,GAC1B,QAAKa,IAGDA,EAAKuG,gBAAkBpH,GAIvBa,EAAKwG,mBAAqBC,EAAStH,IAOpC,SAASW,EAAgBF,EAAUT,GACtC,OAAsD,IAA/CS,EAASsG,WAAU,SAAAQ,GAAC,OAAIxG,EAAQwG,EAAGvH,MAGvC,SAASqF,EAAkBxF,EAAWG,GACzC,cAAuBH,KAAvB,aAAkC,CAC9B,GAAIc,EAD0B,QACAX,GAC1B,OAAO,EAIf,OAAO","sources":["webpack://phase-03/./src/components/Comment.js","webpack://phase-03/./src/components/WordsIndex.js","webpack://phase-03/./src/components/Accordion.js","webpack://phase-03/./src/utils/mix.js","webpack://phase-03/./src/components/maskometerGrid.js","webpack://phase-03/./src/components/Comments.js","webpack://phase-03/./src/pages/library.js","webpack://phase-03/./src/utils/sentences.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport classNames from \"classnames\";\nimport {matches, sentenceHasWord} from \"../utils/sentences\";\n\nexport function HighlightedWord({children, className, isActive, promask, nomask, secondary}) {\n    return <span\n        className={classNames(\n            'highlighted-word',\n            !promask && !nomask && 'before:bg-light',\n            secondary ?\n                [\n                    isActive && 'before:bg-light'\n                ] :\n                [\n                    promask && 'before:bg-promask',\n                    nomask && 'before:bg-nomask',\n                    isActive && (nomask || promask) && 'text-white',\n\n                ],\n            !isActive && 'before:scale-x-0',\n            className\n        )}\n    >\n        {children}\n    </span>\n}\n\nexport default function Comment({\n                                    id,\n                                    className,\n                                    children,\n                                    origin,\n                                    sentences,\n                                    user,\n                                    createdAt,\n                                    word,\n                                    secondWord,\n                                    petition,\n                                    from_now,\n                                    highlightWords,\n                                    large\n                                }) {\n    let lastWasSkipped = false\n\n    const [showAll, setShowAll] = useState()\n\n    return <div\n        id={id}\n        className={classNames(\n            className,\n            \"comment\",\n            large && 'large',\n            origin === 'promask' && 'border-promask',\n            origin === 'nomask' && 'border-nomask'\n        )}>\n        <div className=\" \">\n            <div className={\"rounded-full avatar bg-\" + origin}/>\n        </div>\n        <div className={\"col-span-11\"}>\n            <div className={\"text-gray select-none \" + (large ? 'text-2xl' : 'text-xs')}>\n                <span>User{user}</span>\n                {' • '}\n                <span>{from_now || createdAt}</span>\n            </div>\n            <p className={'comment-text ' + (large ? 'text-3xl leading-snug py-4' : 'py-2 text-base')}>\n                {typeof sentences !== 'undefined' ? sentences.map((sentence, i) => {\n\n\n                    if (sentenceHasWord(sentence, word) || sentenceHasWord(sentence, secondWord)) {\n                        lastWasSkipped = false\n                        return <React.Fragment key={i}>{\n                            sentence.map((part, i) => {\n                                const isPrimaryWord = matches(part, word)\n                                const isSecondaryWord = matches(part, secondWord)\n\n                                if (isPrimaryWord || isSecondaryWord) return <React.Fragment\n                                    key={i}>{\" \"}\n                                    <HighlightedWord\n                                        isActive={highlightWords} promask={origin === 'promask'}\n                                        nomask={origin === 'nomask'} secondary={!isSecondaryWord}>\n                                        {part}\n                                    </HighlightedWord>\n                                </React.Fragment>\n\n                                if (part === secondWord) return <span key={i} className={\n                                    'border-light border-2'\n                                }>{part}</span>\n\n                                return part\n                            })\n                        }{\" \"}\n                        </React.Fragment>\n                    }\n\n                    if (!lastWasSkipped) {\n                        lastWasSkipped = true\n                        return \"[...] \"\n                    }\n\n\n                }) : children}\n            </p>\n            <a href={petition.slug ? \"https://www.change.org/p/\" + petition.slug : undefined} title={petition.title}\n               className={classNames(\"text-gray truncate  block \",\n                   petition.slug ? ' hover:text-light-darker underline' : 'cursor-default',\n                   large ? 'text-2xl' : 'text-xs')}\n               target={'_blank'}>\n                {petition.title || \"Petition title\"}\n            </a>\n        </div>\n\n    </div>\n\n}\n\n\nComment.defaultProps = {\n    highlightWords: true\n}","import classNames from \"classnames\";\nimport React from \"react\";\n\nexport default function Index({words, chosen, setChosen}) {\n\n    return <div className={classNames(\n        \"duration-500 flex flex-col\",\n        chosen.current ? \"w-2/12 border-r-2 border-t2 border-r-white\" : \"w-full \"\n    )}>\n        <div\n            className={\"sticky top-0 text-light px-8 pt-4 pb-4 border-white border-b-2 duration-1000 bg-black select-none  whitespace-nowrap \" + (!chosen.current && 'w-full cursor-pointer')}\n            onClick={() => setChosen({})}\n        >\n            <h2\n                className={\n                    classNames(\"inline-block text-2xl uppercase \")\n                }\n            >\n                Words\n            </h2>\n            <span\n                className={classNames(\"ml-2 text-light text-2xl overflow-hidden\", chosen.current ? \"hidden\" : \"\")}>\n                    <span className=\"animate__animated animate__fadeInLeft\">\n                        / 20 most used in promask and nomask comments\n                    </span>\n                </span>\n\n        </div>\n\n        <ul className=\"overflow-y-scroll no-scrollbar flex-1 words-list\">\n            {words\n                .map(({name, finding}, index) => {\n                    let isNextSelected = index + 1 < words.length ? (words[index + 1].name === chosen.next || words[index + 1].name === chosen.current) : false\n\n                    if (isNextSelected) {\n                        console.log()\n                    }\n                    return <li\n                        key={name}\n                        onClick={() => chosen.current !== name ? setChosen({current: name}) : setChosen({})}\n                        className={classNames(\n                            \"word-item last:border-b-current\",\n                            !isNextSelected && \"border-b-black \",\n                            chosen.current === name ? \"active\" : \"\",\n                        )}\n                    >\n                        <h2 className={classNames(\n                            \"text-lg uppercase\",\n                        )}>\n                            {name}\n                        </h2>\n                        {(chosen.current === name && finding) && <p className={\"pt-1 text-base animate__fadeInUp animate__animated max-w-[15.6vw]\"}>\n                            {finding}\n                        </p>}\n                    </li>\n                })}\n        </ul>\n    </div>\n\n}","import React from \"react\";\nimport classNames from \"classnames\";\n\nexport default function Accordion({onClick, isOpen, children, title, subtitle}) {\n\n\n    return <div className={\"flex-grow flex flex-col last:border-t-white last:border-t-2 \" + (isOpen ? \"h-full\": '')}>\n        <div\n            className={\"pt-4 pb-4 px-8 border-y-white box-border flex justify-between group select-none cursor-pointer text-light \" }\n            onClick={onClick}\n        >\n            <div className={\"whitespace-nowrap \"}>\n                <h2\n                    className={\"text-2xl uppercase inline-block\"}\n                >\n                    {title}\n                </h2>\n                <span\n                    className={classNames(\"ml-2 leading-none text-xl normal-case\", isOpen ? \"\" : \"group-hover:inline-block group-active:opacity-100\")}>\n                    / {subtitle}\n                </span>\n\n            </div>\n\n            <div>\n                <svg width=\"25\" height=\"25\" viewBox=\"0 0 25 25\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                     <path d=\"M0 12.5L25 12.5\" stroke=\"currentColor\" strokeWidth=\"2\"/>\n                    {!isOpen && <path d=\"M12.5 25L12.5 -1.04308e-06\" stroke=\"currentColor\" strokeWidth=\"2\"/>}\n                </svg>\n            </div>\n\n        </div>\n\n        <div className={classNames(\n            \"\",\n            isOpen ? \"h-full\" : 'h-0 overflow-hidden'\n        )}>\n            {children}\n\n        </div>\n    </div>\n}\n\n\nAccordion.defaultProps = {\n    onToggle: () => {\n    }\n}","function d2h(d) {\n    return d.toString(16);\n}  // convert a decimal value to hex\nfunction h2d(h) {\n    return parseInt(h, 16);\n} // convert a hex value to decimal\n\n\nexport function mix(color_1, color_2, weight) {\n    weight = (typeof (weight) !== 'undefined') ? weight : 50; // set the weight to 50%, if that argument is omitted\n\n    let color = \"#\";\n\n    for (let i = 0; i <= 5; i += 2) { // loop through each of the 3 hex pairs—red, green, and blue\n        let v1 = h2d(color_1.substr(i, 2)), // extract the current pairs\n            v2 = h2d(color_2.substr(i, 2)),\n\n            // combine the current pairs from each source color, according to the specified weight\n            val = d2h(Math.floor(v2 + (v1 - v2) * (weight / 100.0)));\n\n        while (val.length < 2) {\n            val = '0' + val;\n        } // prepend a '0' if val results in a single digit\n\n        color += val; // concatenate val to our new color string\n    }\n\n    return color; // PROFIT!\n}","import React from \"react\";\nimport classNames from \"classnames\";\nimport {ArchiveButton} from \"./Button\";\nimport {mix} from \"../utils/mix\";\n\n\nexport function MaskometerGrid({chosen, words, distribution, onClickSecondWord}) {\n\n\n    return <div className=\"h-full flex flex-col justify-between relative gap-4  \">\n        <p className={\"mx-8 mb-4 text-lg\"}>\n            Horizontal position corresponds to usage by the two groups in the selcted corpus of reasons to sign\n        </p>\n        <div className=\"flex-1 \">\n            <div\n                className={classNames(\" h-full px-8 py-4 flex flex-col justify-between relative\", 'overflow-hidden')}>\n                <div className={\"z-1 uppercase\"}>\n\n                    <p className=\"bg-promask text-white text-lg text-center h-full absolute top-0 bottom-0 left-0 rotate-180 p-1 z-10\"\n                       style={{writingMode: 'vertical-lr'}}>\n                        Promask\n                    </p>\n\n                    <p className=\"bg-nomask text-white text-lg text-center h-full absolute top-0 bottom-0 right-0 p-1 z-10\"\n                       style={{writingMode: 'vertical-rl'}}>\n                        Nomask\n                    </p>\n\n                    <div\n                        className=\"absolute top-0 bottom-0 right-1/2 translate-x-1/2 border-r-[1px] boreder-r-white border-dashed opacity-50\"/>\n\n                    <p className=\"text-lg text-sm 2xl:text-base text-center text-gray select-none absolute top-0 left-0 right-0 w-full normal-case bg-black pb-2\"\n                    >\n                        equally used\n                    </p>\n\n                </div>\n\n                {(typeof chosen !== 'undefined' && chosen.current) &&\n                words.nodes.map(({name, deltaNomask}) => {\n\n                    let isCurrent = chosen.next ? chosen.next === name : chosen.current === name\n\n                    isCurrent && console.log(name, deltaNomask)\n\n                    let delta =\n                        isCurrent ?\n                            deltaNomask :\n                            distribution\n                                .find(({\n                                           word,\n                                           secondWord\n                                       }) => {\n\n                                    if (chosen.next) {\n                                        return chosen.next === word && secondWord === name\n                                    }\n                                    return (chosen.current && word === chosen.current) && secondWord === name\n                                })['nomaskDelta']\n\n                    delta = Math.round(delta * 100)\n\n                    delta = 3 + ((97- 3) / (100)) * (delta)\n\n\n                    return <div key={name}\n                                className={\n                                    classNames(\n                                        \"w-full flex items-center relative\",\n                                        \"before:absolute before:left-0 before:right-0 \",\n                                        \"before:border-b-[1px] before:block before:top-1/2 before:transition-all\",\n                                        \"before:w-full transition-[margin,background-color] duration-500\",\n                                        isCurrent ? 'before:border-b-gray  opacity-30' : 'before:border-b-current  before:opacity-20'\n                                    )\n                                }>\n                        <ArchiveButton\n                            isCurrent={isCurrent}\n                            style={{\n                                marginLeft: delta + \"%\",\n                                '--gradient-mix': isCurrent ? undefined : mix('EA3C9A', '3514FF', delta)\n                            }}\n                            className={\"transition-[margin] duration-1000 rounded-[0px] -translate-x-1/2 absolute z-20\"}\n                            onClick={() => onClickSecondWord(name)}\n                        >\n                            {name}\n                        </ArchiveButton>\n                    </div>\n                })\n                }\n            </div>\n\n        </div>\n    </div>\n}","import React, {useEffect, useMemo, useRef, useState} from \"react\";\nimport classNames from \"classnames\";\nimport Comment from \"./Comment\";\nimport {ArchiveButton} from \"./Button\";\nimport {mix} from \"../utils/mix\";\nimport {sentencesHaveWord} from \"../utils/sentences\";\n\n\nfunction GroupCommentList({comments, chosen, secondWord, origin}) {\n\n    const [limit, setLimit] = useState(100)\n\n\n    const {filteredComments, totalComments} = useMemo(() => {\n        let thisOriginComments = comments\n            .filter(({origin: o}) => origin === o)\n        const filteredComments = thisOriginComments\n            .filter(({sentences}) => {\n                return !secondWord || sentencesHaveWord(sentences, secondWord)\n            })\n\n\n        return {\n            totalComments: thisOriginComments.length,\n            filteredComments\n        }\n    }, [secondWord, origin, chosen, comments])\n\n\n    useEffect(() => {\n\n        setLimit(200)\n\n        const id = setInterval(add, 800);\n\n        function add() {\n\n            if (limit > filteredComments.length) {\n                return clearInterval(id)\n            }\n\n            setLimit(l => {\n                return l <= filteredComments.length ? l + 200 : l\n            })\n\n        }\n\n        return () => clearInterval(id)\n\n    }, [chosen])\n\n    let perc = (100 * filteredComments.length / totalComments)\n\n    let round = perc > 1 ? 0 : 1\n\n    console.log(\"Limit is \", limit)\n\n\n    return <div>\n        <p className=\"sticky top-0 bg-black z-30 text-center text-lg pt-3 pb-4\">\n            {\n                secondWord ?\n                    `${perc.toFixed(round)}% of ${origin} opinions (${filteredComments.length} of ${totalComments})` :\n                    `All ${origin} opinions (${filteredComments.length})`\n            }\n        </p>\n\n        <div key={origin} className={\"grid gap-4 pb-64 \"}> {filteredComments\n            .map(\n                (c, i) => i < limit && <Comment key={c.id}\n                                                highlightWords={true}\n                                                word={chosen}\n                                                secondWord={secondWord} {...c} />\n            )}\n\n        </div>\n    </div>\n}\n\nexport default function Comments({comments, chosen, secondWord, onChangeSecondWord, distribution}) {\n\n    const scroller = useRef()\n\n    useEffect(() => {\n        scroller.current?.scrollTo(0, 0)\n    }, [chosen, secondWord])\n\n\n    return <div className={\"flex h-full px-8 flex-wrap \"}>\n        <p className=\"mb-4 w-full text-lg\">Here you can read the reasons to sign the 100 most popular promask and nomask\n            petition</p>\n        <div className=\"flex flex-col h-full w-full\">\n\n            <div className={\"w-full sticky top-0 bg-black z-20\"}>\n                <h2 className={\"text-lg text-light my-4\"}>Filter opinions by:</h2>\n                <div className=\"flex flex-wrap\">\n                    {distribution.map(({secondWord: word, nomaskDelta}) => {\n                        const isSelected = secondWord === word\n                        const isCurrent = chosen === word\n\n                        return <ArchiveButton\n                            key={word}\n                            checkbox\n                            isCurrent={isCurrent}\n                            className={\"mb-2 mr-2\"}\n                            isSelected={isSelected}\n                            onClick={() => onChangeSecondWord(isSelected ? undefined : word)}\n                            style={{\n                                '--gradient-mix': mix('EA3C9A', '3514FF', nomaskDelta * 100)\n                            }}\n                        >\n                            {word}\n                        </ArchiveButton>\n                    })}\n                </div>\n            </div>\n            <div\n                className={classNames(\"transition-transform w-full h-full md:w-11/12 3xl:w-10/12 mx-auto overflow-y-scroll\")}\n                id={\"comments-container\"} ref={scroller}>\n                <div className=\"grid grid-cols-2 gap-8 justify-around \">\n                    {['promask', 'nomask'].map(origin => <GroupCommentList key={origin} origin={origin}\n                                                                           comments={comments}\n                                                                           chosen={chosen} secondWord={secondWord}/>)}\n                </div>\n            </div>\n        </div>\n    </div>\n}","import React, {useEffect, useMemo, useState} from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/Layout\";\nimport classNames from \"classnames\";\nimport WordsIndex from \"../components/WordsIndex\";\nimport Accordion from \"../components/Accordion\";\nimport {MaskometerGrid} from \"../components/maskometerGrid\";\nimport Comments from \"../components/Comments\";\nimport {sentencesHaveWord} from \"../utils/sentences\";\nimport allComments from '../unsourced/comments.json'\n\nexport default function Library({data: {words, ...data}}) {\n    const [chosen, setChosen] = useState({})\n    const [secondWord, setSecondWord] = useState()\n    const [showComments, setShowComments] = useState(false)\n\n    const filteredComments = useMemo(() => allComments\n            .filter(({sentences}) => {\n                return sentencesHaveWord(sentences, chosen.current)\n            }),\n        [chosen])\n\n    useEffect(() => {\n        !showComments && secondWord && setShowComments(true)\n    }, [secondWord])\n\n    useEffect(() => {\n        !chosen.next && setSecondWord()\n    }, [chosen])\n\n    const listOfChosenWords = words.nodes.map(x => x.name)\n\n    const distribution = data\n        .distribution\n        .nodes\n        .filter(i => {\n            return listOfChosenWords.findIndex(x => x === i.secondWord) !== -1\n        })\n\n\n    return <Layout wrapperClassName={\"max-h-screen h-screen flex flex-col\"}\n                   navClassName={\"!text-black\"}\n                   className={\"flex-1 min-h-0 \"}\n                   tutorial>\n        <div className=\"w-full h-full overflow-hidden flex flex-nowrap border-y-white border-t-2 \">\n            <WordsIndex words={words.nodes} chosen={chosen} setChosen={setChosen}/>\n            <div className={classNames(\n                ' overflow-hidden flex flex-col',\n                chosen.current ? 'w-10/12' : 'w-0'\n            )}>\n                <Accordion title={\"Related words\"} subtitle={<>usage of words mentioned with <span\n                    className=\"uppercase\">{chosen.current}</span></>}\n                           isOpen={!showComments} onClick={() => setShowComments(!showComments)}>\n                    <MaskometerGrid chosen={chosen} words={words} distribution={distribution}\n                                    onClickSecondWord={setSecondWord}/>\n                </Accordion>\n                <Accordion title={\"Opinions\"}\n                           subtitle={<>containing <span\n                               className=\"uppercase\">{chosen.current}</span> {secondWord && <>and <span\n                               className=\"uppercase\">{secondWord}</span></>}  </>}\n                           isOpen={showComments} onClick={() => setShowComments(!showComments)}>\n                    <Comments\n                        comments={filteredComments}\n                        distribution={distribution.filter(({word}) => word === chosen.current)}\n                        chosen={chosen.current}\n                        secondWord={secondWord}\n                        onChangeSecondWord={setSecondWord}\n                    />\n                </Accordion>\n            </div>\n        </div>\n    </Layout>\n}\n\nexport const query = graphql`query Glossary {\n    words: allSheetsScatter(filter: {scelta: {eq: \"X\"}}, sort: {order: ASC, fields: [name]}){\n        nodes{\n            name\n            deltaPromask\n            deltaNomask\n            finding\n        }\n    }\n    distribution: allSheetsCopiaDiDistribuzione(sort: {order: ASC, fields: [secondWord]}) {\n        nodes {\n            word\n            secondWord\n            nomaskDelta\n            promaskDelta\n        }\n    }\n}`\n","import replacer from '../data/replace.json'\n\n\n\nexport function matches(part, word) {\n    if (!part)\n        return false;\n\n    if (part.toLowerCase() === word) {\n        return true;\n    }\n\n    if (part.toLocaleString() === replacer[word]) {\n        return true\n    }\n\n    return false;\n}\n\nexport function sentenceHasWord(sentence, word) {\n    return sentence.findIndex(p => matches(p, word)) !== -1\n}\n\nexport function sentencesHaveWord(sentences, word) {\n    for (const sentence of sentences) {\n        if (sentenceHasWord(sentence, word)) {\n            return true\n        }\n    }\n\n    return false\n}\n\n"],"names":["HighlightedWord","children","className","isActive","promask","nomask","secondary","classNames","Comment","id","origin","sentences","user","createdAt","word","secondWord","petition","from_now","highlightWords","large","lastWasSkipped","useState","map","sentence","i","sentenceHasWord","key","part","isPrimaryWord","matches","isSecondaryWord","href","slug","undefined","title","target","defaultProps","Index","words","chosen","setChosen","current","onClick","index","name","finding","isNextSelected","length","next","console","log","Accordion","isOpen","subtitle","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","onToggle","h2d","h","parseInt","mix","color_1","color_2","weight","color","v1","substr","v2","val","Math","floor","toString","MaskometerGrid","distribution","onClickSecondWord","style","writingMode","nodes","deltaNomask","isCurrent","delta","find","round","marginLeft","GroupCommentList","comments","limit","setLimit","useMemo","thisOriginComments","filter","o","filteredComments","sentencesHaveWord","totalComments","useEffect","setInterval","clearInterval","l","perc","toFixed","c","Comments","onChangeSecondWord","scroller","useRef","scrollTo","nomaskDelta","isSelected","checkbox","ref","Library","data","setSecondWord","showComments","setShowComments","allComments","listOfChosenWords","x","findIndex","Layout","wrapperClassName","navClassName","tutorial","toLowerCase","toLocaleString","replacer","p"],"sourceRoot":""}