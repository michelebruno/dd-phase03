{"version":3,"file":"component---src-pages-library-js-73e56c2c4621d72ffb40.js","mappings":"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","sources":["webpack://phase-03/./src/components/Comment.js","webpack://phase-03/./src/components/WordsIndex.js","webpack://phase-03/./src/components/Accordion.js","webpack://phase-03/./src/utils/mix.js","webpack://phase-03/./src/components/maskometerGrid.js","webpack://phase-03/./src/components/Comments.js","webpack://phase-03/./src/pages/library.js"],"sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\n\nexport function HighlightedWord({children, className, isActive, promask, nomask, secondary}) {\n    return <span\n        className={classNames(\n            'highlighted-word',\n            !promask && !nomask && 'before:bg-light',\n            secondary ?\n                [\n                    isActive && 'before:bg-light'\n                ] :\n                [\n                    promask && 'before:bg-promask',\n                    nomask && 'before:bg-nomask',\n                    isActive && (nomask || promask) && 'text-white',\n\n                ],\n            !isActive && 'before:scale-x-0',\n            className\n        )}\n    >\n        {children}\n    </span>\n}\n\nexport default function Comment({\n                                    id,\n                                    className,\n                                    children,\n                                    origin,\n                                    petitionLink,\n                                    likes,\n                                    author,\n                                    createdAt,\n                                    dateText,\n                                    word,\n                                    secondWord,\n                                    splitted,\n                                    petitionTitle,\n                                    highlightWords,\n                                    large\n                                }) {\n\n\n    return <div\n        id={id}\n        className={classNames(\n            className,\n            \"comment flex gap-4 w-full bg-white text-black boreder-2 normal-case\",\n            large ? 'p-8 rounded-xl' : 'p-4 rounded-xl text-base ',\n            origin === 'promask' && 'border-promask',\n            origin === 'nomask' && 'border-nomask'\n        )}>\n        <div className=\"w-1/12 \">\n            <div className={\"rounded-full bg-\" + origin} style={{aspectRatio: '1'}}/>\n        </div>\n        <div className={\"w-11/12\"}>\n            <div className={\"text-gray select-none \" + (large ? 'text-xl' : 'text-sm')}>\n                <span>{author}</span>\n                {' â€¢ '}\n                <span>{dateText || createdAt}</span>\n            </div>\n            <p className={'comment-text ' + (large ? 'text-4xl leading-snug py-4' : 'py-1 text-base')}>\n                {typeof splitted !== 'undefined' ? splitted.map((part, i) => {\n                    const isPrimaryWord = part.toLowerCase() === word\n                    const isSecondaryWord = part.toLowerCase() === secondWord\n\n                    if (isPrimaryWord || isSecondaryWord) return <React.Fragment\n                        key={i}>{\" \"}\n                        <HighlightedWord\n                            isActive={highlightWords} promask={origin === 'promask'}\n                            nomask={origin === 'nomask'} secondary={!isSecondaryWord}>\n                            {part}\n                        </HighlightedWord>\n                    </React.Fragment>\n\n                    if (part === secondWord) return <span key={i} className={\n                        'border-light border-2'\n                    }>{part}</span>\n\n                    return part\n                }) : children}\n            </p>\n            <p className={\"text-gray \" + (large ? 'text-xl' : 'text-sm')}>\n                <a href={petitionLink} className={\"underline hover:text-light-darker\"}\n                   target={'_blank'}>{petitionTitle || \"Petition title\"}</a>\n            </p>\n        </div>\n\n    </div>\n\n}\n\n\nComment.defaultProps = {\n    highlightWords: true\n}","import classNames from \"classnames\";\nimport React from \"react\";\n\nexport default function Index({words, chosen, setChosen}) {\n\n    return <div className={classNames(\n        \"transition-all duration-1000 overflow-y-scroll\",\n        chosen.current ? \"w-2/12 border-r-2 border-r-current\" : \"w-full \"\n    )}>\n        <div\n            className={\"sticky top-0 text-light px-8 pt-4 pb-4 border-white border-b-2 transition-[width] duration-1000 bg-black select-none  whitespace-nowrap \" + (!chosen.current && 'w-screen cursor-pointer')}\n            onClick={() => setChosen({})}\n        >\n            <h2\n                className={\n                    classNames(\"inline-block text-3xl uppercase \")\n                }\n            >\n                Words\n            </h2>\n            <span\n                className={classNames(\"ml-2 text-light text-2xl\", chosen.current ? \"hidden\" : \"\")}>/ 20 most used in promask and nomask comments</span>\n\n        </div>\n\n        <ul className=\"pb-8\">\n            {words\n                .map(({name, finding}) => <li\n                    key={name}\n                    onMouseEnter={() => setChosen(\n                        c => ({current: c.current, next: name})\n                    )}\n                    onMouseLeave={() => setChosen(c => ({...c, next: undefined}))}\n                    onClick={() => chosen.current !== name ? setChosen({current: name}) : setChosen({})}\n                    className={classNames(\n                        \"border-y-[1px] border-b-current cursor-pointer hover:border-t-light\",\n                        chosen.current === name ? \"bg-light text-black border-t-light\" : \"hover:text-light border-t-black\",\n                    )}\n                >\n                    <h2 className={classNames(\n                        \"text-xl uppercase\",\n                        \"px-8 pt-4 pb-4\",\n                    )}>\n                        {name}\n                    </h2>\n                    {(chosen.current === name && finding) && <p className={\"px-8 pb-4\"}>\n                        {finding}\n                    </p>}\n                </li>)}\n        </ul>\n    </div>\n\n}","import React from \"react\";\nimport classNames from \"classnames\";\n\nexport default function Accordion({onClick, isOpen, children, title, subtitle}) {\n\n\n    return <div className={\"flex-grow flex flex-col \" + (isOpen ? \"h-full\": 'first:border-b-2 last:border-t-2')}>\n        <div\n            className={\"pt-4 pb-4 px-8 border-y-white box-border flex justify-between group select-none cursor-pointer text-light \" }\n            onClick={onClick}\n        >\n            <div className={\"whitespace-nowrap \"}>\n                <h2\n                    className={\" text-3xl uppercase inline-block\"}\n                >\n                    {title}\n                </h2>\n                <span\n                    className={classNames(\"ml-2 leading-none text-2xl transition-[opacity] normal-case\", isOpen ? \"\" : \"hidden group-hover:inline-block group-hover:opacity-50 group-active:opacity-100\")}>\n                    / {subtitle}\n                </span>\n\n            </div>\n\n            <div>\n                <svg width=\"25\" height=\"25\" viewBox=\"0 0 25 25\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                     <path d=\"M0 12.5L25 12.5\" stroke=\"currentColor\" strokeWidth=\"2\"/>\n                    {isOpen && <path d=\"M12.5 25L12.5 -1.04308e-06\" stroke=\"currentColor\" strokeWidth=\"2\"/>}\n                </svg>\n            </div>\n\n        </div>\n\n        <div className={classNames(\n            \"overflow-hidden\",\n            \"\",\n            isOpen ? \"h-full\" : 'h-0'\n        )}>\n            {children}\n\n        </div>\n    </div>\n}\n\n\nAccordion.defaultProps = {\n    onToggle: () => {\n    }\n}","function d2h(d) {\n    return d.toString(16);\n}  // convert a decimal value to hex\nfunction h2d(h) {\n    return parseInt(h, 16);\n} // convert a hex value to decimal\n\n\nexport function mix(color_1, color_2, weight) {\n    weight = (typeof (weight) !== 'undefined') ? weight : 50; // set the weight to 50%, if that argument is omitted\n\n    let color = \"#\";\n\n    for (let i = 0; i <= 5; i += 2) { // loop through each of the 3 hex pairsâ€”red, green, and blue\n        let v1 = h2d(color_1.substr(i, 2)), // extract the current pairs\n            v2 = h2d(color_2.substr(i, 2)),\n\n            // combine the current pairs from each source color, according to the specified weight\n            val = d2h(Math.floor(v2 + (v1 - v2) * (weight / 100.0)));\n\n        while (val.length < 2) {\n            val = '0' + val;\n        } // prepend a '0' if val results in a single digit\n\n        color += val; // concatenate val to our new color string\n    }\n\n    return color; // PROFIT!\n}","import React, {useState} from \"react\";\nimport classNames from \"classnames\";\nimport {ArchiveButton} from \"./Button\";\nimport {mix} from \"../utils/mix\";\n\n\nexport function MaskometerGrid({chosen, words, distribution, onClickSecondWord}) {\n\n\n    return <div className=\"h-full flex flex-col justify-between relative gap-4  \">\n        <p className={\"mx-8 mb-4 text-xl\"}>\n            Horizontal position corresponds to usage by the two groups in the selcted corpus of comments\n        </p>\n        <div className=\"flex-1 \">\n            <div\n                className={classNames(\" h-full px-8 py-4 flex flex-col justify-between relative\", 'overflow-hidden')}>\n                <div className={\"z-1 uppercase\"}>\n\n                    <p className=\"bg-promask text-white text-xl text-center h-full absolute top-0 bottom-0 left-0 rotate-180 p-1 z-10\"\n                       style={{writingMode: 'vertical-lr'}}>\n                        Promask\n                    </p>\n\n                    <p className=\"bg-nomask text-white text-xl text-center h-full absolute top-0 bottom-0 right-0 p-1 z-10\"\n                       style={{writingMode: 'vertical-rl'}}>\n                        Nomask\n                    </p>\n\n                    <div\n                        className=\"absolute top-0 bottom-0 right-1/2 translate-x-1/2 border-r-[1px] boreder-r-white border-dashed opacity-50\"/>\n\n                    <p className=\"text-lg text-xs text-center absolute top-0 left-0 right-0 w-full normal-case bg-black\"\n                    >\n                        equally used\n                    </p>\n\n                </div>\n\n                {(typeof chosen !== 'undefined' && chosen.current) ?\n                    words.nodes.map(({name}) => {\n\n                        let isCurrent = chosen.next ? chosen.next === name : chosen.current === name\n\n\n                        let delta = distribution\n                            .find(({\n                                       word,\n                                       secondWord\n                                   }) => {\n\n                                if (chosen.next) {\n                                    return chosen.next === word && secondWord === name\n                                }\n                                return (chosen.current && word === chosen.current) && secondWord === name\n                            })['promaskDelta']\n\n                        delta = Math.round(delta * 100)\n\n                        return <div key={name}\n                                    className={\n                                        classNames(\n                                            \"w-full flex items-center relative\",\n                                            \"before:absolute before:left-0 before:right-0 \",\n                                            \"before:border-b-[1px] before:block before:top-1/2 before:transition-all\",\n                                            \"before:w-full transition-all duration-500 delay-100\",\n                                            isCurrent ? 'before:border-b-gray  opacity-30' : 'before:border-b-current  before:opacity-20'\n                                        )\n                                    }>\n                            <ArchiveButton\n                                isCurrent={isCurrent}\n                                style={{\n                                    marginLeft: delta + \"%\",\n                                    '--gradient-mix': isCurrent ? undefined : mix('EA3C9A', '3514FF', delta)\n                                }}\n                                className={\"transition-[margin] duration-1000 delay-100 rounded-[0px] -translate-x-1/2 absolute\"}\n                                onClick={() => onClickSecondWord(name)}\n                            >\n                                {name}\n                            </ArchiveButton>\n                        </div>\n                    }) : <div className=\"p-20 text-7xl w-3/4 opacity-50 upppercase\">\n                        click on one of the most used words to see how the related words are used by the two groups\n                        in the comments\n                    </div>\n                }\n            </div>\n\n        </div>\n    </div>\n}","import React from \"react\";\nimport classNames from \"classnames\";\nimport Comment from \"./Comment\";\nimport Button, {ArchiveButton} from \"./Button\";\nimport {mix} from \"../utils/mix\";\n\n\nexport default function Comments({comments, chosen, secondWord, onChangeSecondWord, distribution}) {\n\n    return <div className={\"flex h-full px-8 flex-wrap \"}>\n        <p className=\"mb-4 w-full text-lg\">Here you can read the comments on the 100 most liked promask and nomask petition</p>\n        <div className={\"w-full sticky top-0\"}>\n            <h2 className={\"uppercase mb-4\"}>Filter comments by:</h2>\n            <div className=\"flex flex-wrap gap-x-2\">\n                {distribution.map(({secondWord: word, promaskDelta}) => {\n                    const isSelected = secondWord === word\n                    const isCurrent = chosen === word\n\n\n                    return <ArchiveButton\n                        key={word}\n                        checkbox\n                        isCurrent={isCurrent}\n                        className={\"mb-2\"}\n                        isSelected={isSelected}\n                        onClick={() => onChangeSecondWord(isSelected ? undefined : word)}\n                        style={{\n                            '--gradient-mix': mix('EA3C9A', '3514FF', promaskDelta * 100)\n                        }}\n                    >\n                        {word}\n                    </ArchiveButton>\n                })}\n            </div>\n        </div>\n        <div className=\"flex h-full w-full overflow-y-scroll\">\n\n            <div\n                className={classNames(\"transition-transform w-3/4 mx-auto\")}\n                id={\"comments-container\"}>\n                <div className=\"grid grid-cols-2 gap-16 justify-around \">\n                    {['promask', 'nomask'].map(origin => {\n                        let filteredComments = comments\n                            .filter(({origin: o}) => origin === o)\n\n                        let totalComments = filteredComments.length\n\n                        if (secondWord) {\n                            filteredComments = filteredComments.filter(c => c.splitted.findIndex(s => s === secondWord) !== -1)\n                        }\n\n\n                        return <div>\n                            <p className=\"sticky top-0 bg-black z-30 text-center text-lg pt-3 pb-4\">{filteredComments.length}{secondWord && \" of \" + totalComments} {origin} comments</p>\n\n                            <div key={origin} className={\"flex flex-col gap-4 pb-64 \"}> {filteredComments\n                                .map(\n                                    (c) => <Comment key={c.id}\n                                                    highlightWords={true}\n                                                    word={chosen.current}\n                                                    secondWord={secondWord} {...c} />\n                                )}\n\n                            </div>\n                        </div>\n                    })}\n                </div>\n            </div>\n        </div>\n    </div>\n}","import React, {useEffect, useState} from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/Layout\";\nimport classNames from \"classnames\";\nimport WordsIndex from \"../components/WordsIndex\";\nimport Accordion from \"../components/Accordion\";\nimport {MaskometerGrid} from \"../components/maskometerGrid\";\nimport Comments from \"../components/Comments\";\n\n\nexport default function Library({data: {words, allComments, ...data}}) {\n    const [chosen, setChosen] = useState({})\n    const [secondWord, setSecondWord] = useState()\n    const [showComments, setShowComments] = useState(false)\n\n    useEffect(() => {\n        !showComments && secondWord && setShowComments(true)\n    }, [secondWord])\n\n    useEffect(() => {\n        !chosen.next && setSecondWord()\n    },[chosen])\n\n    const listOfChosenWords = words.nodes.map(x => x.name)\n\n    const distribution = data\n        .distribution\n        .nodes\n        .filter(i => {\n            return listOfChosenWords.findIndex(x => x === i.secondWord) !== -1\n        })\n\n\n    return <Layout wrapperClassName={\"max-h-screen h-screen flex flex-col\"}\n                   className={\"flex-1 min-h-0 \"}>\n        <div className=\"w-full h-full overflow-hidden flex flex-nowrap  border-y-white border-y-2\">\n            <WordsIndex words={words.nodes} chosen={chosen} setChosen={setChosen}/>\n            <div className={classNames(\n                'transition-[width] duration-1000 overflow-hidden flex flex-col',\n                chosen.current ? 'w-10/12' : 'w-0'\n            )}>\n                <Accordion title={\"Related words\"} subtitle={<>usage of words when occurring with <span className=\"uppercase\">{chosen.current}</span></>}\n                           isOpen={!showComments} onClick={() => setShowComments(!showComments)}>\n                    <MaskometerGrid chosen={chosen} words={words} distribution={distribution}\n                                    onClickSecondWord={setSecondWord}/>\n                </Accordion>\n                <Accordion title={\"Opinions\"}\n                           subtitle={<>containing <span className=\"uppercase\">{chosen.current}</span> {secondWord && <>and <span className=\"uppercase\">{secondWord}</span></>}  </>}\n                           isOpen={showComments} onClick={() => setShowComments(!showComments)}>\n                    <Comments\n                        comments={allComments.nodes\n                            .filter(({word}) => {\n                                return word === chosen.current\n                            })\n                        }\n                        distribution={distribution.filter(({word}) => word === chosen.current)}\n                        chosen={chosen.current}\n                        secondWord={secondWord}\n                        onChangeSecondWord={setSecondWord}\n                    />\n                </Accordion>\n            </div>\n        </div>\n    </Layout>\n}\n\nexport const query = graphql`query Glossary {\n    words: allSheetsScatter(filter: {scelta: {eq: \"X\"}}, sort: {order: ASC, fields: [name]}){\n        nodes{\n            name\n            deltaPromask\n            finding\n        }\n    }\n    distribution: allSheetsDistribuzioneV2(sort: {order: ASC, fields: [secondWord]}) {\n        nodes {\n            word\n            secondWord\n            nomaskDelta\n            promaskDelta\n        }\n    }\n    allComments: allSheetsEstratti {\n        nodes {\n            ...CommentFragment\n        }\n    }\n}`\n"],"names":["HighlightedWord","children","className","isActive","promask","nomask","secondary","classNames","Comment","id","origin","petitionLink","author","likes","createdAt","dateText","word","secondWord","splitted","petitionTitle","highlightWords","large","style","aspectRatio","map","part","i","isPrimaryWord","toLowerCase","isSecondaryWord","key","href","target","defaultProps","Index","words","chosen","setChosen","current","onClick","name","finding","onMouseEnter","c","next","onMouseLeave","undefined","Accordion","isOpen","title","subtitle","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","onToggle","h2d","h","parseInt","mix","color_1","color_2","weight","color","v1","substr","v2","val","Math","floor","toString","length","MaskometerGrid","distribution","onClickSecondWord","writingMode","nodes","isCurrent","delta","find","round","marginLeft","Comments","comments","onChangeSecondWord","promaskDelta","isSelected","checkbox","filteredComments","filter","o","totalComments","findIndex","s","Library","data","allComments","useState","setSecondWord","showComments","setShowComments","useEffect","listOfChosenWords","x","Layout","wrapperClassName"],"sourceRoot":""}