{"version":3,"file":"component---src-pages-glossary-js-68ae0ad58c07c91e06c4.js","mappings":"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","sources":["webpack://phase-03/./src/components/Comment.js","webpack://phase-03/./src/components/WordsIndex.js","webpack://phase-03/./src/components/Accordion.js","webpack://phase-03/./src/utils/mix.js","webpack://phase-03/./src/components/maskometerGrid.js","webpack://phase-03/./src/components/Comments.js","webpack://phase-03/./src/pages/glossary.js"],"sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\n\nexport function HighlightedWord({children, className, isActive, promask, nomask, black}) {\n    return <span\n        className={classNames(\n            'highlighted-word',\n            !promask && !nomask && 'before:bg-light',\n            promask && 'before:bg-promask',\n            nomask && 'before:bg-nomask',\n            isActive && (nomask || promask) && 'text-white',\n            !isActive && 'before:scale-x-0',\n            className\n        )}\n    >\n        {children}\n    </span>\n}\n\nexport default function Comment({\n                                    id,\n                                    className,\n                                    children,\n                                    origin,\n                                    petitionLink,\n                                    likes,\n                                    author,\n                                    createdAt,\n                                    dateText,\n                                    word,\n                                    secondWord,\n                                    splitted,\n                                    petitionTitle,\n                                    highlightWords,\n                                    large\n                                }) {\n\n\n    if (secondWord && splitted.findIndex(s => s === secondWord) === -1)\n        return null;\n\n    return <div\n        id={id}\n        className={classNames(\n            className,\n            \"comment flex gap-4 w-full bg-white text-black boreder-2 normal-case\",\n            large ? 'p-8 rounded-xl' : 'p-4 rounded-xl text-base ',\n            origin === 'promask' && 'border-promask',\n            origin === 'nomask' && 'border-nomask'\n        )}>\n        <div className=\"w-1/12 \">\n            <div className={\"rounded-full bg-\" + origin} style={{aspectRatio: '1'}}/>\n        </div>\n        <div className={\"w-11/12\"}>\n            <div className={\"text-gray select-none \" + (large ? 'text-xl' : 'text-sm')}>\n                <span>{author}</span>\n                {' â€¢ '}\n                <span>{dateText || createdAt}</span>\n            </div>\n            <p className={'comment-text ' + (large ? 'text-4xl leading-snug py-4' : 'py-1 text-base')}>\n                {typeof splitted !== 'undefined' ? splitted.map((part, i) => {\n                    if (part.toLowerCase() === word || part.toLowerCase() === secondWord) return <React.Fragment key={i}>{\" \"}\n                        <HighlightedWord\n                            isActive={highlightWords} promask={origin === 'promask'}\n                            nomask={origin === 'nomask'}>\n                            {part}\n                        </HighlightedWord>\n                    </React.Fragment>\n\n                    if (part === secondWord) return <span key={i} className={\n                        'border-light border-2'\n                    }>{part}</span>\n\n                    return part\n                }) : children}\n            </p>\n            <p className={\"text-gray \" + (large ? 'text-xl' : 'text-sm')}>\n                <a href={petitionLink} className={\"underline hover:text-light-darker\"} target={'_blank'}>{petitionTitle || \"Petition title\"}</a>\n            </p>\n        </div>\n\n    </div>\n\n}\n\n\nComment.defaultProps = {\n    highlightWords: true\n}","import classNames from \"classnames\";\nimport React from \"react\";\n\nexport default function Index({words, chosen, setChosen}) {\n\n    return <div className={classNames(\n        \"transition-all duration-1000 overflow-y-scroll\",\n        chosen.current ? \"w-2/12 border-r-2 border-r-current\" : \"w-full \"\n    )}>\n        <h2 className={\n            classNames(\"sticky top-0 text-3xl px-8 pt-4 pb-3 border-current border-y-2 transition-[width] duration-1000 bg-black\", !chosen.current && 'w-screen')\n        }>\n            Words\n        </h2>\n\n        <ul className=\"pb-8\">\n            {words\n                .map(({name, finding}) => <li\n                    key={name}\n                    onMouseEnter={() => setChosen(\n                        c => ({current: c.current, next: name})\n                    )}\n                    onMouseLeave={() => setChosen(c => ({...c, next: undefined}))}\n                    onClick={() => chosen.current !== name ? setChosen({current: name}) : setChosen({})}\n                    className={classNames(\n                        \"border-y-[1px] border-b-current cursor-pointer hover:border-t-light\",\n                        chosen.current === name ? \"bg-light text-black border-t-light\" : \"hover:text-light border-t-black\",\n                    )}\n                >\n                    <h2 className={classNames(\n                        \"text-xl uppercase\",\n                        \"px-8 pt-4 pb-3\",\n                    )}>\n                        {name}\n                    </h2>\n                    {(chosen.current === name && finding) && <p className={\"px-8 pb-4\"}>\n                        {finding}\n                    </p>}\n                </li>)}\n        </ul>\n    </div>\n\n}","import React from \"react\";\nimport classNames from \"classnames\";\n\nexport default function Accordion({onClick, isOpen, children, title}) {\n\n\n    return <div className={\"flex-grow flex flex-col \" + (isOpen && \"h-full\")}>\n        <div className={\"pt-4 pb-3 px-8 border-t-2 border-y-current box-border flex justify-between\"} onClick={onClick}\n        >\n            <h2\n                className={\" text-3xl \"}\n            >\n                {title}\n            </h2>\n\n            <div className={\"pt-1\"}>\n                <svg width=\"25\" height=\"25\" viewBox=\"0 0 25 25\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M0 12.5L25 12.5\" stroke=\"white\" strokeWidth=\"2\"/>\n                    <path d=\"M12.5 25L12.5 -1.04308e-06\" stroke=\"white\" strokeWidth=\"2\"\n                          className={\"transition-all \" + (isOpen && \"rotate-90\")}/>\n                </svg>\n            </div>\n\n        </div>\n\n        <div className={classNames(\n            \"overflow-hidden\",\n            \"transition-all duration-1000 \",\n            isOpen ? \"h-full\" : 'h-0'\n        )}>\n            {children}\n\n        </div>\n    </div>\n}\n\n\nAccordion.defaultProps = {\n    onToggle: () => {\n    }\n}","function d2h(d) {\n    return d.toString(16);\n}  // convert a decimal value to hex\nfunction h2d(h) {\n    return parseInt(h, 16);\n} // convert a hex value to decimal\n\n\nexport function mix(color_1, color_2, weight) {\n    weight = (typeof (weight) !== 'undefined') ? weight : 50; // set the weight to 50%, if that argument is omitted\n\n    let color = \"#\";\n\n    for (let i = 0; i <= 5; i += 2) { // loop through each of the 3 hex pairsâ€”red, green, and blue\n        let v1 = h2d(color_1.substr(i, 2)), // extract the current pairs\n            v2 = h2d(color_2.substr(i, 2)),\n\n            // combine the current pairs from each source color, according to the specified weight\n            val = d2h(Math.floor(v2 + (v1 - v2) * (weight / 100.0)));\n\n        while (val.length < 2) {\n            val = '0' + val;\n        } // prepend a '0' if val results in a single digit\n\n        color += val; // concatenate val to our new color string\n    }\n\n    return color; // PROFIT!\n}","import React, {useState} from \"react\";\nimport classNames from \"classnames\";\nimport {ArchiveButton} from \"./Button\";\nimport {mix} from \"../utils/mix\";\n\n\nexport function MaskometerGrid({chosen, words, distribution, onClickSecondWord}) {\n\n\n    return <div className=\"h-full flex flex-col justify-between relative gap-4  \">\n        <p className={\"mx-8 mb-3 text-base\"}>\n            Horizontal position corresponds to usage by the two groups in comments mentioning the word\n            {\" \"}\n            <span className=\"underline\">{chosen.next || chosen.current}</span>\n        </p>\n        <div className=\"flex-1 \">\n            <div\n                className={classNames(\" h-full px-8 py-4 flex flex-col justify-between relative\", 'overflow-hidden')}>\n                <div className={\"z-1 uppercase\"}>\n\n                    <p className=\"bg-promask text-white text-xl text-center h-full absolute top-0 bottom-0 left-0 rotate-180 p-1 z-10\"\n                       style={{writingMode: 'vertical-lr'}}>\n                        Promask\n                    </p>\n\n                    <p className=\"bg-nomask text-white text-xl text-center h-full absolute top-0 bottom-0 right-0 p-1 z-10\"\n                       style={{writingMode: 'vertical-rl'}}>\n                        Nomask\n                    </p>\n\n                    <div className=\"absolute top-0 bottom-0 right-1/2 translate-x-1/2 border-r-[1px] boreder-r-white border-dashed opacity-20\"></div>\n\n                    <p className=\"text-lg text-xs text-center h-full absolute top-0 bottom-0 right-1/2 translate-x-1/2 rotate-180 normal-case\n                    before:border-b-[1px] before:opacity-20 before:block before:top-1/2 before:transition-all\"\n                       style={{writingMode: 'vertical-rl'}}>\n                        equally used\n                    </p>\n\n                 </div>\n\n                {(typeof chosen !== 'undefined' && chosen.current) ?\n                    words.nodes.map(({name, deltaPromask}) => {\n\n                        let isCurrent = chosen.next ? chosen.next === name : chosen.current === name\n\n\n                        let delta = isCurrent ?\n                            deltaPromask :\n                            distribution\n                                .find(({\n                                           word,\n                                           secondWord\n                                       }) => {\n\n                                    if (chosen.next) {\n                                        return chosen.next === word && secondWord === name\n                                    }\n                                    return (chosen.current && word === chosen.current) && secondWord === name\n                                })['promaskDelta']\n\n                        delta = Math.round(delta * 100)\n\n                        return <div key={name}\n                                    className={\n                                        classNames(\n                                            \"w-full flex items-center relative\",\n                                            \"before:absolute before:left-0 before:right-0 \",\n                                            \"before:border-b-[1px] before:block before:top-1/2 before:transition-all\",\n                                            \"before:w-full\",\n                                            isCurrent ? 'before:border-b-light' : 'before:border-b-current  before:opacity-20 '\n                                        )\n                                    }>\n                            <ArchiveButton\n                                isCurrent={isCurrent}\n                                style={{\n                                    marginLeft: delta + \"%\",\n                                    '--gradient-mix': isCurrent ? undefined : mix('EA3C9A', '3514FF', delta)\n                                }}\n                                className={\"transition-[margin] duration-1000 delay-200 rounded-[0px] -translate-x-1/2\"}\n                                onClick={() => onClickSecondWord(name)}\n                            >\n                                {name}\n                            </ArchiveButton>\n                        </div>\n                    }) : <div className=\"p-20 text-7xl w-3/4 opacity-50 upppercase\">\n                        click on one of the most used words to see how the related words are used by the two groups\n                        in the comments\n                    </div>\n                }\n            </div>\n\n        </div>\n    </div>\n}","import React from \"react\";\nimport classNames from \"classnames\";\nimport Comment from \"./Comment\";\nimport Button, {ArchiveButton} from \"./Button\";\nimport {mix} from \"../utils/mix\";\n\n\nexport default function Comments({comments, chosen, secondWord, onChangeSecondWord, distribution}) {\n\n    return <div className={\"flex h-full px-8 flex-wrap \"}>\n        <p className=\"mb-3 w-full\">Comments containing the\n            word <span className={\"underline\"}>{chosen}</span>{secondWord && <>{\" and \"}<span className={\"underline\"}>{secondWord}</span></>}</p>\n                <div className=\"flex h-full w-full overflow-y-scroll\">\n                <div className={\"w-[25%] sticky top-0\"}>\n                <h3 className={\"uppercase mb-3\"}>Filter comments by:</h3>\n            {distribution.map(({secondWord: word, promaskDelta}) => {\n                const isSelected = secondWord === word\n                const isCurrent = chosen === word\n\n                if (isCurrent)\n                return null;\n\n                return <ArchiveButton\n                key={word}\n                className={\"mb-2\"}\n                isSelected={isSelected}\n                onClick={() => onChangeSecondWord(isSelected ? undefined : word)}\n                style={{\n                '--gradient-mix': mix('EA3C9A', '3514FF', promaskDelta*100)\n            }}\n                >\n            {word}\n                </ArchiveButton>\n            })}\n                </div>\n                <div\n                className={classNames(\"transition-transform w-[60%]\")}\n                id={\"comments-container\"}>\n                <div className=\"grid grid-cols-2 gap-8 justify-around \">\n            {['promask', 'nomask'].map(origin => {\n                const filteredComments = comments\n                .filter(({origin: o}) => origin === o)\n\n                return <div key={origin} className={\"flex flex-col gap-3 pb-64 \"}>\n                <p className=\"sticky top-0 bg-black z-30 text-center\">{filteredComments.length} {origin} comments</p>\n            {filteredComments\n                .map(\n                (c) => <Comment key={c.id}\n                highlightWords={true}\n                word={chosen.current}\n                secondWord={secondWord} {...c} />\n                )}\n\n                </div>\n            })}\n                </div>\n                </div>\n                </div>\n                </div>\n            }","import React, {useEffect, useState} from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/Layout\";\nimport classNames from \"classnames\";\nimport WordsIndex from \"../components/WordsIndex\";\nimport Accordion from \"../components/Accordion\";\nimport {MaskometerGrid} from \"../components/maskometerGrid\";\nimport Comments from \"../components/Comments\";\n\n\nexport default function Glossary({data: {words, allComments, ...data}}) {\n    const [chosen, setChosen] = useState({})\n    const [secondWord, setSecondWord] = useState()\n    const [showComments, setShowComments] = useState(false)\n\n    useEffect(() => {\n        !showComments && secondWord && setShowComments(true)\n    },[secondWord])\n\n    const listOfChosenWords = words.nodes.map(x => x.name)\n\n    const distribution = data\n        .distribution\n        .nodes\n        .filter(i => {\n            return listOfChosenWords.findIndex(x => x === i.secondWord) !== -1\n        })\n\n\n    return <Layout wrapperClassName={\"max-h-screen h-screen flex flex-col\"}\n                   className={\"flex-1 min-h-0 \"}>\n        <div className=\"w-full h-full overflow-hidden flex flex-nowrap\">\n            <WordsIndex words={words.nodes} chosen={chosen} setChosen={setChosen}/>\n            <div className={classNames(\n                'transition-[width] duration-1000 overflow-hidden flex flex-col ',\n                chosen.current ? 'w-10/12' : 'w-0'\n            )}>\n                <Accordion title={\"Maskometer\"} isOpen={!showComments} onClick={() => setShowComments(!showComments)}>\n                    <MaskometerGrid chosen={chosen} words={words} distribution={distribution} onClickSecondWord={setSecondWord}/>\n                </Accordion>\n                <Accordion title={\"Comments\"} isOpen={showComments} onClick={() => setShowComments(!showComments)}>\n                    <Comments\n                        comments={allComments.nodes\n                            .filter(({word}) => {\n                                return word === chosen.current\n                            })\n                        }\n                        distribution={distribution.filter(({word}) => word === chosen.current)}\n                        chosen={chosen.current}\n                        secondWord={secondWord}\n                        onChangeSecondWord={setSecondWord}\n                    />\n                </Accordion>\n            </div>\n        </div>\n    </Layout>\n}\n\nexport const query = graphql`query Glossary {\n    words: allSheetsScatter(filter: {scelta: {eq: \"X\"}}, sort: {order: ASC, fields: [name]}){\n        nodes{\n            name\n            deltaPromask\n            finding\n        }\n    }\n    distribution: allSheetsDistribuzioneV2(sort: {order: ASC, fields: [secondWord]}) {\n        nodes {\n            word\n            secondWord\n            nomaskDelta\n            promaskDelta\n        }\n    }\n    allComments: allSheetsEstratti(filter: {scelto: {eq: \"x\"}}) {\n        nodes {\n            ...CommentFragment\n        }\n    }\n}`\n"],"names":["HighlightedWord","children","className","isActive","promask","nomask","black","classNames","Comment","id","origin","petitionLink","author","likes","createdAt","dateText","word","secondWord","splitted","petitionTitle","highlightWords","large","findIndex","s","style","aspectRatio","map","part","i","toLowerCase","key","href","target","defaultProps","Index","words","chosen","setChosen","current","name","finding","onMouseEnter","c","next","onMouseLeave","undefined","onClick","Accordion","isOpen","title","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","onToggle","h2d","h","parseInt","mix","color_1","color_2","weight","color","v1","substr","v2","val","Math","floor","toString","length","MaskometerGrid","distribution","onClickSecondWord","writingMode","nodes","deltaPromask","isCurrent","delta","find","round","marginLeft","Comments","comments","onChangeSecondWord","promaskDelta","isSelected","filteredComments","filter","o","Glossary","data","allComments","useState","setSecondWord","showComments","setShowComments","useEffect","listOfChosenWords","x","Layout","wrapperClassName"],"sourceRoot":""}